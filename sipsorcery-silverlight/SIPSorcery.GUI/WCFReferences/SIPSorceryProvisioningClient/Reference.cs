//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace SIPSorcery.SIPSorceryProvisioningClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.sipsorcery.com/provisioning", ConfigurationName="SIPSorceryProvisioningClient.IProvisioningService")]
    public interface IProvisioningService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetCDRsCount", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetCDRsCountResponse")]
        System.IAsyncResult BeginGetCDRsCount(string whereExpression, System.AsyncCallback callback, object asyncState);
        
        int EndGetCDRsCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetCDRs", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetCDRsResponse")]
        System.IAsyncResult BeginGetCDRs(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPCDRAsset> EndGetCDRs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/ExtendSession", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/ExtendSessionResponse" +
            "")]
        System.IAsyncResult BeginExtendSession(int minutes, System.AsyncCallback callback, object asyncState);
        
        void EndExtendSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetTimeZoneOffsetMinu" +
            "tes", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetTimeZoneOffsetMinu" +
            "tesResponse")]
        System.IAsyncResult BeginGetTimeZoneOffsetMinutes(System.AsyncCallback callback, object asyncState);
        
        int EndGetTimeZoneOffsetMinutes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/IsAlive", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/IsAliveResponse")]
        System.IAsyncResult BeginIsAlive(System.AsyncCallback callback, object asyncState);
        
        bool EndIsAlive(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/TestException", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/TestExceptionResponse" +
            "")]
        System.IAsyncResult BeginTestException(System.AsyncCallback callback, object asyncState);
        
        void EndTestException(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/AreNewAccountsEnabled" +
            "", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/AreNewAccountsEnabled" +
            "Response")]
        System.IAsyncResult BeginAreNewAccountsEnabled(System.AsyncCallback callback, object asyncState);
        
        bool EndAreNewAccountsEnabled(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/CreateCustomer", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/CreateCustomerRespons" +
            "e")]
        System.IAsyncResult BeginCreateCustomer(SIPSorcery.CRM.Customer customer, System.AsyncCallback callback, object asyncState);
        
        void EndCreateCustomer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/DeleteCustomer", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/DeleteCustomerRespons" +
            "e")]
        System.IAsyncResult BeginDeleteCustomer(string customerUsername, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteCustomer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/Login", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/LoginResponse")]
        System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState);
        
        string EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/Logout", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/LogoutResponse")]
        System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState);
        
        void EndLogout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetCustomer", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetCustomerResponse")]
        System.IAsyncResult BeginGetCustomer(string username, System.AsyncCallback callback, object asyncState);
        
        SIPSorcery.CRM.Customer EndGetCustomer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/UpdateCustomer", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/UpdateCustomerRespons" +
            "e")]
        System.IAsyncResult BeginUpdateCustomer(SIPSorcery.CRM.Customer customer, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateCustomer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/UpdateCustomerPasswor" +
            "d", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/UpdateCustomerPasswor" +
            "dResponse")]
        System.IAsyncResult BeginUpdateCustomerPassword(string username, string oldPassword, string newPassword, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateCustomerPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPDomains", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPDomainsResponse" +
            "")]
        System.IAsyncResult BeginGetSIPDomains(string filterExpression, int offset, int count, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDomain> EndGetSIPDomains(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPAccountsCount", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPAccountsCountRe" +
            "sponse")]
        System.IAsyncResult BeginGetSIPAccountsCount(string whereExpression, System.AsyncCallback callback, object asyncState);
        
        int EndGetSIPAccountsCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPAccounts", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPAccountsRespons" +
            "e")]
        System.IAsyncResult BeginGetSIPAccounts(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPAccount> EndGetSIPAccounts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/AddSIPAccount", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/AddSIPAccountResponse" +
            "")]
        System.IAsyncResult BeginAddSIPAccount(SIPSorcery.SIP.App.SIPAccount sipAccount, System.AsyncCallback callback, object asyncState);
        
        SIPSorcery.SIP.App.SIPAccount EndAddSIPAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/UpdateSIPAccount", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/UpdateSIPAccountRespo" +
            "nse")]
        System.IAsyncResult BeginUpdateSIPAccount(SIPSorcery.SIP.App.SIPAccount sipAccount, System.AsyncCallback callback, object asyncState);
        
        SIPSorcery.SIP.App.SIPAccount EndUpdateSIPAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/DeleteSIPAccount", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/DeleteSIPAccountRespo" +
            "nse")]
        System.IAsyncResult BeginDeleteSIPAccount(SIPSorcery.SIP.App.SIPAccount sipAccount, System.AsyncCallback callback, object asyncState);
        
        SIPSorcery.SIP.App.SIPAccount EndDeleteSIPAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPRegistrarBindin" +
            "gsCount", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPRegistrarBindin" +
            "gsCountResponse")]
        System.IAsyncResult BeginGetSIPRegistrarBindingsCount(string whereExpression, System.AsyncCallback callback, object asyncState);
        
        int EndGetSIPRegistrarBindingsCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPRegistrarBindin" +
            "gs", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPRegistrarBindin" +
            "gsResponse")]
        System.IAsyncResult BeginGetSIPRegistrarBindings(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPRegistrarBinding> EndGetSIPRegistrarBindings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPProvidersCount", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPProvidersCountR" +
            "esponse")]
        System.IAsyncResult BeginGetSIPProvidersCount(string whereExpression, System.AsyncCallback callback, object asyncState);
        
        int EndGetSIPProvidersCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPProviders", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPProvidersRespon" +
            "se")]
        System.IAsyncResult BeginGetSIPProviders(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProvider> EndGetSIPProviders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/AddSIPProvider", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/AddSIPProviderRespons" +
            "e")]
        System.IAsyncResult BeginAddSIPProvider(SIPSorcery.SIP.App.SIPProvider sipProvider, System.AsyncCallback callback, object asyncState);
        
        SIPSorcery.SIP.App.SIPProvider EndAddSIPProvider(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/UpdateSIPProvider", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/UpdateSIPProviderResp" +
            "onse")]
        System.IAsyncResult BeginUpdateSIPProvider(SIPSorcery.SIP.App.SIPProvider sipProvider, System.AsyncCallback callback, object asyncState);
        
        SIPSorcery.SIP.App.SIPProvider EndUpdateSIPProvider(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/DeleteSIPProvider", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/DeleteSIPProviderResp" +
            "onse")]
        System.IAsyncResult BeginDeleteSIPProvider(SIPSorcery.SIP.App.SIPProvider sipProvider, System.AsyncCallback callback, object asyncState);
        
        SIPSorcery.SIP.App.SIPProvider EndDeleteSIPProvider(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPProviderBinding" +
            "sCount", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPProviderBinding" +
            "sCountResponse")]
        System.IAsyncResult BeginGetSIPProviderBindingsCount(string whereExpression, System.AsyncCallback callback, object asyncState);
        
        int EndGetSIPProviderBindingsCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPProviderBinding" +
            "s", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetSIPProviderBinding" +
            "sResponse")]
        System.IAsyncResult BeginGetSIPProviderBindings(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProviderBinding> EndGetSIPProviderBindings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetDialPlansCount", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetDialPlansCountResp" +
            "onse")]
        System.IAsyncResult BeginGetDialPlansCount(string whereExpression, System.AsyncCallback callback, object asyncState);
        
        int EndGetDialPlansCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetDialPlans", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetDialPlansResponse")]
        System.IAsyncResult BeginGetDialPlans(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialPlan> EndGetDialPlans(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/AddDialPlan", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/AddDialPlanResponse")]
        System.IAsyncResult BeginAddDialPlan(SIPSorcery.SIP.App.SIPDialPlan dialPlan, System.AsyncCallback callback, object asyncState);
        
        SIPSorcery.SIP.App.SIPDialPlan EndAddDialPlan(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/UpdateDialPlan", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/UpdateDialPlanRespons" +
            "e")]
        System.IAsyncResult BeginUpdateDialPlan(SIPSorcery.SIP.App.SIPDialPlan dialPlan, System.AsyncCallback callback, object asyncState);
        
        SIPSorcery.SIP.App.SIPDialPlan EndUpdateDialPlan(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/DeleteDialPlan", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/DeleteDialPlanRespons" +
            "e")]
        System.IAsyncResult BeginDeleteDialPlan(SIPSorcery.SIP.App.SIPDialPlan dialPlan, System.AsyncCallback callback, object asyncState);
        
        SIPSorcery.SIP.App.SIPDialPlan EndDeleteDialPlan(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetCallsCount", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetCallsCountResponse" +
            "")]
        System.IAsyncResult BeginGetCallsCount(string whereExpression, System.AsyncCallback callback, object asyncState);
        
        int EndGetCallsCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/provisioning/IProvisioningService/GetCalls", ReplyAction="http://www.sipsorcery.com/provisioning/IProvisioningService/GetCallsResponse")]
        System.IAsyncResult BeginGetCalls(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialogueAsset> EndGetCalls(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProvisioningServiceChannel : SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCDRsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCDRsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCDRsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCDRsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPCDRAsset> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPCDRAsset>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTimeZoneOffsetMinutesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTimeZoneOffsetMinutesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AreNewAccountsEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AreNewAccountsEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIPSorcery.CRM.Customer Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIPSorcery.CRM.Customer)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSIPDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSIPDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDomain> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDomain>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSIPAccountsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSIPAccountsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSIPAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSIPAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPAccount> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPAccount>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddSIPAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddSIPAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIPSorcery.SIP.App.SIPAccount Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIPSorcery.SIP.App.SIPAccount)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateSIPAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateSIPAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIPSorcery.SIP.App.SIPAccount Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIPSorcery.SIP.App.SIPAccount)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteSIPAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteSIPAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIPSorcery.SIP.App.SIPAccount Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIPSorcery.SIP.App.SIPAccount)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSIPRegistrarBindingsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSIPRegistrarBindingsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSIPRegistrarBindingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSIPRegistrarBindingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPRegistrarBinding> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPRegistrarBinding>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSIPProvidersCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSIPProvidersCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSIPProvidersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSIPProvidersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProvider> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProvider>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddSIPProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddSIPProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIPSorcery.SIP.App.SIPProvider Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIPSorcery.SIP.App.SIPProvider)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateSIPProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateSIPProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIPSorcery.SIP.App.SIPProvider Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIPSorcery.SIP.App.SIPProvider)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteSIPProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteSIPProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIPSorcery.SIP.App.SIPProvider Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIPSorcery.SIP.App.SIPProvider)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSIPProviderBindingsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSIPProviderBindingsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSIPProviderBindingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSIPProviderBindingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProviderBinding> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProviderBinding>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDialPlansCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDialPlansCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDialPlansCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDialPlansCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialPlan> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialPlan>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddDialPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddDialPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIPSorcery.SIP.App.SIPDialPlan Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIPSorcery.SIP.App.SIPDialPlan)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateDialPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateDialPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIPSorcery.SIP.App.SIPDialPlan Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIPSorcery.SIP.App.SIPDialPlan)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteDialPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteDialPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIPSorcery.SIP.App.SIPDialPlan Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIPSorcery.SIP.App.SIPDialPlan)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCallsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCallsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCallsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCallsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialogueAsset> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialogueAsset>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProvisioningServiceClient : System.ServiceModel.ClientBase<SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService>, SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService {
        
        private BeginOperationDelegate onBeginGetCDRsCountDelegate;
        
        private EndOperationDelegate onEndGetCDRsCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetCDRsCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCDRsDelegate;
        
        private EndOperationDelegate onEndGetCDRsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCDRsCompletedDelegate;
        
        private BeginOperationDelegate onBeginExtendSessionDelegate;
        
        private EndOperationDelegate onEndExtendSessionDelegate;
        
        private System.Threading.SendOrPostCallback onExtendSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTimeZoneOffsetMinutesDelegate;
        
        private EndOperationDelegate onEndGetTimeZoneOffsetMinutesDelegate;
        
        private System.Threading.SendOrPostCallback onGetTimeZoneOffsetMinutesCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsAliveDelegate;
        
        private EndOperationDelegate onEndIsAliveDelegate;
        
        private System.Threading.SendOrPostCallback onIsAliveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestExceptionDelegate;
        
        private EndOperationDelegate onEndTestExceptionDelegate;
        
        private System.Threading.SendOrPostCallback onTestExceptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginAreNewAccountsEnabledDelegate;
        
        private EndOperationDelegate onEndAreNewAccountsEnabledDelegate;
        
        private System.Threading.SendOrPostCallback onAreNewAccountsEnabledCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateCustomerDelegate;
        
        private EndOperationDelegate onEndCreateCustomerDelegate;
        
        private System.Threading.SendOrPostCallback onCreateCustomerCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCustomerDelegate;
        
        private EndOperationDelegate onEndDeleteCustomerDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCustomerCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogoutDelegate;
        
        private EndOperationDelegate onEndLogoutDelegate;
        
        private System.Threading.SendOrPostCallback onLogoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCustomerDelegate;
        
        private EndOperationDelegate onEndGetCustomerDelegate;
        
        private System.Threading.SendOrPostCallback onGetCustomerCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCustomerDelegate;
        
        private EndOperationDelegate onEndUpdateCustomerDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCustomerCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCustomerPasswordDelegate;
        
        private EndOperationDelegate onEndUpdateCustomerPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCustomerPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSIPDomainsDelegate;
        
        private EndOperationDelegate onEndGetSIPDomainsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSIPDomainsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSIPAccountsCountDelegate;
        
        private EndOperationDelegate onEndGetSIPAccountsCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetSIPAccountsCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSIPAccountsDelegate;
        
        private EndOperationDelegate onEndGetSIPAccountsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSIPAccountsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddSIPAccountDelegate;
        
        private EndOperationDelegate onEndAddSIPAccountDelegate;
        
        private System.Threading.SendOrPostCallback onAddSIPAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateSIPAccountDelegate;
        
        private EndOperationDelegate onEndUpdateSIPAccountDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateSIPAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteSIPAccountDelegate;
        
        private EndOperationDelegate onEndDeleteSIPAccountDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteSIPAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSIPRegistrarBindingsCountDelegate;
        
        private EndOperationDelegate onEndGetSIPRegistrarBindingsCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetSIPRegistrarBindingsCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSIPRegistrarBindingsDelegate;
        
        private EndOperationDelegate onEndGetSIPRegistrarBindingsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSIPRegistrarBindingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSIPProvidersCountDelegate;
        
        private EndOperationDelegate onEndGetSIPProvidersCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetSIPProvidersCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSIPProvidersDelegate;
        
        private EndOperationDelegate onEndGetSIPProvidersDelegate;
        
        private System.Threading.SendOrPostCallback onGetSIPProvidersCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddSIPProviderDelegate;
        
        private EndOperationDelegate onEndAddSIPProviderDelegate;
        
        private System.Threading.SendOrPostCallback onAddSIPProviderCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateSIPProviderDelegate;
        
        private EndOperationDelegate onEndUpdateSIPProviderDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateSIPProviderCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteSIPProviderDelegate;
        
        private EndOperationDelegate onEndDeleteSIPProviderDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteSIPProviderCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSIPProviderBindingsCountDelegate;
        
        private EndOperationDelegate onEndGetSIPProviderBindingsCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetSIPProviderBindingsCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSIPProviderBindingsDelegate;
        
        private EndOperationDelegate onEndGetSIPProviderBindingsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSIPProviderBindingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDialPlansCountDelegate;
        
        private EndOperationDelegate onEndGetDialPlansCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetDialPlansCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDialPlansDelegate;
        
        private EndOperationDelegate onEndGetDialPlansDelegate;
        
        private System.Threading.SendOrPostCallback onGetDialPlansCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddDialPlanDelegate;
        
        private EndOperationDelegate onEndAddDialPlanDelegate;
        
        private System.Threading.SendOrPostCallback onAddDialPlanCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDialPlanDelegate;
        
        private EndOperationDelegate onEndUpdateDialPlanDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateDialPlanCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDialPlanDelegate;
        
        private EndOperationDelegate onEndDeleteDialPlanDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteDialPlanCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCallsCountDelegate;
        
        private EndOperationDelegate onEndGetCallsCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetCallsCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCallsDelegate;
        
        private EndOperationDelegate onEndGetCallsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCallsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ProvisioningServiceClient() {
        }
        
        public ProvisioningServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProvisioningServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProvisioningServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProvisioningServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetCDRsCountCompletedEventArgs> GetCDRsCountCompleted;
        
        public event System.EventHandler<GetCDRsCompletedEventArgs> GetCDRsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExtendSessionCompleted;
        
        public event System.EventHandler<GetTimeZoneOffsetMinutesCompletedEventArgs> GetTimeZoneOffsetMinutesCompleted;
        
        public event System.EventHandler<IsAliveCompletedEventArgs> IsAliveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestExceptionCompleted;
        
        public event System.EventHandler<AreNewAccountsEnabledCompletedEventArgs> AreNewAccountsEnabledCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateCustomerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCustomerCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogoutCompleted;
        
        public event System.EventHandler<GetCustomerCompletedEventArgs> GetCustomerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCustomerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCustomerPasswordCompleted;
        
        public event System.EventHandler<GetSIPDomainsCompletedEventArgs> GetSIPDomainsCompleted;
        
        public event System.EventHandler<GetSIPAccountsCountCompletedEventArgs> GetSIPAccountsCountCompleted;
        
        public event System.EventHandler<GetSIPAccountsCompletedEventArgs> GetSIPAccountsCompleted;
        
        public event System.EventHandler<AddSIPAccountCompletedEventArgs> AddSIPAccountCompleted;
        
        public event System.EventHandler<UpdateSIPAccountCompletedEventArgs> UpdateSIPAccountCompleted;
        
        public event System.EventHandler<DeleteSIPAccountCompletedEventArgs> DeleteSIPAccountCompleted;
        
        public event System.EventHandler<GetSIPRegistrarBindingsCountCompletedEventArgs> GetSIPRegistrarBindingsCountCompleted;
        
        public event System.EventHandler<GetSIPRegistrarBindingsCompletedEventArgs> GetSIPRegistrarBindingsCompleted;
        
        public event System.EventHandler<GetSIPProvidersCountCompletedEventArgs> GetSIPProvidersCountCompleted;
        
        public event System.EventHandler<GetSIPProvidersCompletedEventArgs> GetSIPProvidersCompleted;
        
        public event System.EventHandler<AddSIPProviderCompletedEventArgs> AddSIPProviderCompleted;
        
        public event System.EventHandler<UpdateSIPProviderCompletedEventArgs> UpdateSIPProviderCompleted;
        
        public event System.EventHandler<DeleteSIPProviderCompletedEventArgs> DeleteSIPProviderCompleted;
        
        public event System.EventHandler<GetSIPProviderBindingsCountCompletedEventArgs> GetSIPProviderBindingsCountCompleted;
        
        public event System.EventHandler<GetSIPProviderBindingsCompletedEventArgs> GetSIPProviderBindingsCompleted;
        
        public event System.EventHandler<GetDialPlansCountCompletedEventArgs> GetDialPlansCountCompleted;
        
        public event System.EventHandler<GetDialPlansCompletedEventArgs> GetDialPlansCompleted;
        
        public event System.EventHandler<AddDialPlanCompletedEventArgs> AddDialPlanCompleted;
        
        public event System.EventHandler<UpdateDialPlanCompletedEventArgs> UpdateDialPlanCompleted;
        
        public event System.EventHandler<DeleteDialPlanCompletedEventArgs> DeleteDialPlanCompleted;
        
        public event System.EventHandler<GetCallsCountCompletedEventArgs> GetCallsCountCompleted;
        
        public event System.EventHandler<GetCallsCompletedEventArgs> GetCallsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetCDRsCount(string whereExpression, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCDRsCount(whereExpression, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetCDRsCount(System.IAsyncResult result) {
            return base.Channel.EndGetCDRsCount(result);
        }
        
        private System.IAsyncResult OnBeginGetCDRsCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string whereExpression = ((string)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetCDRsCount(whereExpression, callback, asyncState);
        }
        
        private object[] OnEndGetCDRsCount(System.IAsyncResult result) {
            int retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetCDRsCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCDRsCountCompleted(object state) {
            if ((this.GetCDRsCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCDRsCountCompleted(this, new GetCDRsCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCDRsCountAsync(string whereExpression) {
            this.GetCDRsCountAsync(whereExpression, null);
        }
        
        public void GetCDRsCountAsync(string whereExpression, object userState) {
            if ((this.onBeginGetCDRsCountDelegate == null)) {
                this.onBeginGetCDRsCountDelegate = new BeginOperationDelegate(this.OnBeginGetCDRsCount);
            }
            if ((this.onEndGetCDRsCountDelegate == null)) {
                this.onEndGetCDRsCountDelegate = new EndOperationDelegate(this.OnEndGetCDRsCount);
            }
            if ((this.onGetCDRsCountCompletedDelegate == null)) {
                this.onGetCDRsCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCDRsCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetCDRsCountDelegate, new object[] {
                        whereExpression}, this.onEndGetCDRsCountDelegate, this.onGetCDRsCountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetCDRs(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCDRs(whereExpression, offset, count, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPCDRAsset> SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetCDRs(System.IAsyncResult result) {
            return base.Channel.EndGetCDRs(result);
        }
        
        private System.IAsyncResult OnBeginGetCDRs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string whereExpression = ((string)(inValues[0]));
            int offset = ((int)(inValues[1]));
            int count = ((int)(inValues[2]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetCDRs(whereExpression, offset, count, callback, asyncState);
        }
        
        private object[] OnEndGetCDRs(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPCDRAsset> retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetCDRs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCDRsCompleted(object state) {
            if ((this.GetCDRsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCDRsCompleted(this, new GetCDRsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCDRsAsync(string whereExpression, int offset, int count) {
            this.GetCDRsAsync(whereExpression, offset, count, null);
        }
        
        public void GetCDRsAsync(string whereExpression, int offset, int count, object userState) {
            if ((this.onBeginGetCDRsDelegate == null)) {
                this.onBeginGetCDRsDelegate = new BeginOperationDelegate(this.OnBeginGetCDRs);
            }
            if ((this.onEndGetCDRsDelegate == null)) {
                this.onEndGetCDRsDelegate = new EndOperationDelegate(this.OnEndGetCDRs);
            }
            if ((this.onGetCDRsCompletedDelegate == null)) {
                this.onGetCDRsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCDRsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCDRsDelegate, new object[] {
                        whereExpression,
                        offset,
                        count}, this.onEndGetCDRsDelegate, this.onGetCDRsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginExtendSession(int minutes, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExtendSession(minutes, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndExtendSession(System.IAsyncResult result) {
            base.Channel.EndExtendSession(result);
        }
        
        private System.IAsyncResult OnBeginExtendSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int minutes = ((int)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginExtendSession(minutes, callback, asyncState);
        }
        
        private object[] OnEndExtendSession(System.IAsyncResult result) {
            ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndExtendSession(result);
            return null;
        }
        
        private void OnExtendSessionCompleted(object state) {
            if ((this.ExtendSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExtendSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExtendSessionAsync(int minutes) {
            this.ExtendSessionAsync(minutes, null);
        }
        
        public void ExtendSessionAsync(int minutes, object userState) {
            if ((this.onBeginExtendSessionDelegate == null)) {
                this.onBeginExtendSessionDelegate = new BeginOperationDelegate(this.OnBeginExtendSession);
            }
            if ((this.onEndExtendSessionDelegate == null)) {
                this.onEndExtendSessionDelegate = new EndOperationDelegate(this.OnEndExtendSession);
            }
            if ((this.onExtendSessionCompletedDelegate == null)) {
                this.onExtendSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExtendSessionCompleted);
            }
            base.InvokeAsync(this.onBeginExtendSessionDelegate, new object[] {
                        minutes}, this.onEndExtendSessionDelegate, this.onExtendSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetTimeZoneOffsetMinutes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTimeZoneOffsetMinutes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetTimeZoneOffsetMinutes(System.IAsyncResult result) {
            return base.Channel.EndGetTimeZoneOffsetMinutes(result);
        }
        
        private System.IAsyncResult OnBeginGetTimeZoneOffsetMinutes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetTimeZoneOffsetMinutes(callback, asyncState);
        }
        
        private object[] OnEndGetTimeZoneOffsetMinutes(System.IAsyncResult result) {
            int retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetTimeZoneOffsetMinutes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTimeZoneOffsetMinutesCompleted(object state) {
            if ((this.GetTimeZoneOffsetMinutesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTimeZoneOffsetMinutesCompleted(this, new GetTimeZoneOffsetMinutesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTimeZoneOffsetMinutesAsync() {
            this.GetTimeZoneOffsetMinutesAsync(null);
        }
        
        public void GetTimeZoneOffsetMinutesAsync(object userState) {
            if ((this.onBeginGetTimeZoneOffsetMinutesDelegate == null)) {
                this.onBeginGetTimeZoneOffsetMinutesDelegate = new BeginOperationDelegate(this.OnBeginGetTimeZoneOffsetMinutes);
            }
            if ((this.onEndGetTimeZoneOffsetMinutesDelegate == null)) {
                this.onEndGetTimeZoneOffsetMinutesDelegate = new EndOperationDelegate(this.OnEndGetTimeZoneOffsetMinutes);
            }
            if ((this.onGetTimeZoneOffsetMinutesCompletedDelegate == null)) {
                this.onGetTimeZoneOffsetMinutesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTimeZoneOffsetMinutesCompleted);
            }
            base.InvokeAsync(this.onBeginGetTimeZoneOffsetMinutesDelegate, null, this.onEndGetTimeZoneOffsetMinutesDelegate, this.onGetTimeZoneOffsetMinutesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginIsAlive(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsAlive(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndIsAlive(System.IAsyncResult result) {
            return base.Channel.EndIsAlive(result);
        }
        
        private System.IAsyncResult OnBeginIsAlive(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginIsAlive(callback, asyncState);
        }
        
        private object[] OnEndIsAlive(System.IAsyncResult result) {
            bool retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndIsAlive(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsAliveCompleted(object state) {
            if ((this.IsAliveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsAliveCompleted(this, new IsAliveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsAliveAsync() {
            this.IsAliveAsync(null);
        }
        
        public void IsAliveAsync(object userState) {
            if ((this.onBeginIsAliveDelegate == null)) {
                this.onBeginIsAliveDelegate = new BeginOperationDelegate(this.OnBeginIsAlive);
            }
            if ((this.onEndIsAliveDelegate == null)) {
                this.onEndIsAliveDelegate = new EndOperationDelegate(this.OnEndIsAlive);
            }
            if ((this.onIsAliveCompletedDelegate == null)) {
                this.onIsAliveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsAliveCompleted);
            }
            base.InvokeAsync(this.onBeginIsAliveDelegate, null, this.onEndIsAliveDelegate, this.onIsAliveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginTestException(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestException(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndTestException(System.IAsyncResult result) {
            base.Channel.EndTestException(result);
        }
        
        private System.IAsyncResult OnBeginTestException(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginTestException(callback, asyncState);
        }
        
        private object[] OnEndTestException(System.IAsyncResult result) {
            ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndTestException(result);
            return null;
        }
        
        private void OnTestExceptionCompleted(object state) {
            if ((this.TestExceptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestExceptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestExceptionAsync() {
            this.TestExceptionAsync(null);
        }
        
        public void TestExceptionAsync(object userState) {
            if ((this.onBeginTestExceptionDelegate == null)) {
                this.onBeginTestExceptionDelegate = new BeginOperationDelegate(this.OnBeginTestException);
            }
            if ((this.onEndTestExceptionDelegate == null)) {
                this.onEndTestExceptionDelegate = new EndOperationDelegate(this.OnEndTestException);
            }
            if ((this.onTestExceptionCompletedDelegate == null)) {
                this.onTestExceptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestExceptionCompleted);
            }
            base.InvokeAsync(this.onBeginTestExceptionDelegate, null, this.onEndTestExceptionDelegate, this.onTestExceptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginAreNewAccountsEnabled(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAreNewAccountsEnabled(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndAreNewAccountsEnabled(System.IAsyncResult result) {
            return base.Channel.EndAreNewAccountsEnabled(result);
        }
        
        private System.IAsyncResult OnBeginAreNewAccountsEnabled(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginAreNewAccountsEnabled(callback, asyncState);
        }
        
        private object[] OnEndAreNewAccountsEnabled(System.IAsyncResult result) {
            bool retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndAreNewAccountsEnabled(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAreNewAccountsEnabledCompleted(object state) {
            if ((this.AreNewAccountsEnabledCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AreNewAccountsEnabledCompleted(this, new AreNewAccountsEnabledCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AreNewAccountsEnabledAsync() {
            this.AreNewAccountsEnabledAsync(null);
        }
        
        public void AreNewAccountsEnabledAsync(object userState) {
            if ((this.onBeginAreNewAccountsEnabledDelegate == null)) {
                this.onBeginAreNewAccountsEnabledDelegate = new BeginOperationDelegate(this.OnBeginAreNewAccountsEnabled);
            }
            if ((this.onEndAreNewAccountsEnabledDelegate == null)) {
                this.onEndAreNewAccountsEnabledDelegate = new EndOperationDelegate(this.OnEndAreNewAccountsEnabled);
            }
            if ((this.onAreNewAccountsEnabledCompletedDelegate == null)) {
                this.onAreNewAccountsEnabledCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAreNewAccountsEnabledCompleted);
            }
            base.InvokeAsync(this.onBeginAreNewAccountsEnabledDelegate, null, this.onEndAreNewAccountsEnabledDelegate, this.onAreNewAccountsEnabledCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginCreateCustomer(SIPSorcery.CRM.Customer customer, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateCustomer(customer, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndCreateCustomer(System.IAsyncResult result) {
            base.Channel.EndCreateCustomer(result);
        }
        
        private System.IAsyncResult OnBeginCreateCustomer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIPSorcery.CRM.Customer customer = ((SIPSorcery.CRM.Customer)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginCreateCustomer(customer, callback, asyncState);
        }
        
        private object[] OnEndCreateCustomer(System.IAsyncResult result) {
            ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndCreateCustomer(result);
            return null;
        }
        
        private void OnCreateCustomerCompleted(object state) {
            if ((this.CreateCustomerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateCustomerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateCustomerAsync(SIPSorcery.CRM.Customer customer) {
            this.CreateCustomerAsync(customer, null);
        }
        
        public void CreateCustomerAsync(SIPSorcery.CRM.Customer customer, object userState) {
            if ((this.onBeginCreateCustomerDelegate == null)) {
                this.onBeginCreateCustomerDelegate = new BeginOperationDelegate(this.OnBeginCreateCustomer);
            }
            if ((this.onEndCreateCustomerDelegate == null)) {
                this.onEndCreateCustomerDelegate = new EndOperationDelegate(this.OnEndCreateCustomer);
            }
            if ((this.onCreateCustomerCompletedDelegate == null)) {
                this.onCreateCustomerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateCustomerCompleted);
            }
            base.InvokeAsync(this.onBeginCreateCustomerDelegate, new object[] {
                        customer}, this.onEndCreateCustomerDelegate, this.onCreateCustomerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginDeleteCustomer(string customerUsername, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCustomer(customerUsername, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndDeleteCustomer(System.IAsyncResult result) {
            base.Channel.EndDeleteCustomer(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCustomer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string customerUsername = ((string)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginDeleteCustomer(customerUsername, callback, asyncState);
        }
        
        private object[] OnEndDeleteCustomer(System.IAsyncResult result) {
            ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndDeleteCustomer(result);
            return null;
        }
        
        private void OnDeleteCustomerCompleted(object state) {
            if ((this.DeleteCustomerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCustomerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCustomerAsync(string customerUsername) {
            this.DeleteCustomerAsync(customerUsername, null);
        }
        
        public void DeleteCustomerAsync(string customerUsername, object userState) {
            if ((this.onBeginDeleteCustomerDelegate == null)) {
                this.onBeginDeleteCustomerDelegate = new BeginOperationDelegate(this.OnBeginDeleteCustomer);
            }
            if ((this.onEndDeleteCustomerDelegate == null)) {
                this.onEndDeleteCustomerDelegate = new EndOperationDelegate(this.OnEndDeleteCustomer);
            }
            if ((this.onDeleteCustomerCompletedDelegate == null)) {
                this.onDeleteCustomerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCustomerCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCustomerDelegate, new object[] {
                        customerUsername}, this.onEndDeleteCustomerDelegate, this.onDeleteCustomerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginLogin(username, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            string retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string username, string password) {
            this.LoginAsync(username, password, null);
        }
        
        public void LoginAsync(string username, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        username,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginLogout(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogout(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndLogout(System.IAsyncResult result) {
            base.Channel.EndLogout(result);
        }
        
        private System.IAsyncResult OnBeginLogout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginLogout(callback, asyncState);
        }
        
        private object[] OnEndLogout(System.IAsyncResult result) {
            ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndLogout(result);
            return null;
        }
        
        private void OnLogoutCompleted(object state) {
            if ((this.LogoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoutAsync() {
            this.LogoutAsync(null);
        }
        
        public void LogoutAsync(object userState) {
            if ((this.onBeginLogoutDelegate == null)) {
                this.onBeginLogoutDelegate = new BeginOperationDelegate(this.OnBeginLogout);
            }
            if ((this.onEndLogoutDelegate == null)) {
                this.onEndLogoutDelegate = new EndOperationDelegate(this.OnEndLogout);
            }
            if ((this.onLogoutCompletedDelegate == null)) {
                this.onLogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            base.InvokeAsync(this.onBeginLogoutDelegate, null, this.onEndLogoutDelegate, this.onLogoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetCustomer(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCustomer(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIPSorcery.CRM.Customer SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetCustomer(System.IAsyncResult result) {
            return base.Channel.EndGetCustomer(result);
        }
        
        private System.IAsyncResult OnBeginGetCustomer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetCustomer(username, callback, asyncState);
        }
        
        private object[] OnEndGetCustomer(System.IAsyncResult result) {
            SIPSorcery.CRM.Customer retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetCustomer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCustomerCompleted(object state) {
            if ((this.GetCustomerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCustomerCompleted(this, new GetCustomerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCustomerAsync(string username) {
            this.GetCustomerAsync(username, null);
        }
        
        public void GetCustomerAsync(string username, object userState) {
            if ((this.onBeginGetCustomerDelegate == null)) {
                this.onBeginGetCustomerDelegate = new BeginOperationDelegate(this.OnBeginGetCustomer);
            }
            if ((this.onEndGetCustomerDelegate == null)) {
                this.onEndGetCustomerDelegate = new EndOperationDelegate(this.OnEndGetCustomer);
            }
            if ((this.onGetCustomerCompletedDelegate == null)) {
                this.onGetCustomerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCustomerCompleted);
            }
            base.InvokeAsync(this.onBeginGetCustomerDelegate, new object[] {
                        username}, this.onEndGetCustomerDelegate, this.onGetCustomerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginUpdateCustomer(SIPSorcery.CRM.Customer customer, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCustomer(customer, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndUpdateCustomer(System.IAsyncResult result) {
            base.Channel.EndUpdateCustomer(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCustomer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIPSorcery.CRM.Customer customer = ((SIPSorcery.CRM.Customer)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginUpdateCustomer(customer, callback, asyncState);
        }
        
        private object[] OnEndUpdateCustomer(System.IAsyncResult result) {
            ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndUpdateCustomer(result);
            return null;
        }
        
        private void OnUpdateCustomerCompleted(object state) {
            if ((this.UpdateCustomerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCustomerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCustomerAsync(SIPSorcery.CRM.Customer customer) {
            this.UpdateCustomerAsync(customer, null);
        }
        
        public void UpdateCustomerAsync(SIPSorcery.CRM.Customer customer, object userState) {
            if ((this.onBeginUpdateCustomerDelegate == null)) {
                this.onBeginUpdateCustomerDelegate = new BeginOperationDelegate(this.OnBeginUpdateCustomer);
            }
            if ((this.onEndUpdateCustomerDelegate == null)) {
                this.onEndUpdateCustomerDelegate = new EndOperationDelegate(this.OnEndUpdateCustomer);
            }
            if ((this.onUpdateCustomerCompletedDelegate == null)) {
                this.onUpdateCustomerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCustomerCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCustomerDelegate, new object[] {
                        customer}, this.onEndUpdateCustomerDelegate, this.onUpdateCustomerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginUpdateCustomerPassword(string username, string oldPassword, string newPassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCustomerPassword(username, oldPassword, newPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndUpdateCustomerPassword(System.IAsyncResult result) {
            base.Channel.EndUpdateCustomerPassword(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCustomerPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string oldPassword = ((string)(inValues[1]));
            string newPassword = ((string)(inValues[2]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginUpdateCustomerPassword(username, oldPassword, newPassword, callback, asyncState);
        }
        
        private object[] OnEndUpdateCustomerPassword(System.IAsyncResult result) {
            ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndUpdateCustomerPassword(result);
            return null;
        }
        
        private void OnUpdateCustomerPasswordCompleted(object state) {
            if ((this.UpdateCustomerPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCustomerPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCustomerPasswordAsync(string username, string oldPassword, string newPassword) {
            this.UpdateCustomerPasswordAsync(username, oldPassword, newPassword, null);
        }
        
        public void UpdateCustomerPasswordAsync(string username, string oldPassword, string newPassword, object userState) {
            if ((this.onBeginUpdateCustomerPasswordDelegate == null)) {
                this.onBeginUpdateCustomerPasswordDelegate = new BeginOperationDelegate(this.OnBeginUpdateCustomerPassword);
            }
            if ((this.onEndUpdateCustomerPasswordDelegate == null)) {
                this.onEndUpdateCustomerPasswordDelegate = new EndOperationDelegate(this.OnEndUpdateCustomerPassword);
            }
            if ((this.onUpdateCustomerPasswordCompletedDelegate == null)) {
                this.onUpdateCustomerPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCustomerPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCustomerPasswordDelegate, new object[] {
                        username,
                        oldPassword,
                        newPassword}, this.onEndUpdateCustomerPasswordDelegate, this.onUpdateCustomerPasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetSIPDomains(string filterExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSIPDomains(filterExpression, offset, count, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDomain> SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetSIPDomains(System.IAsyncResult result) {
            return base.Channel.EndGetSIPDomains(result);
        }
        
        private System.IAsyncResult OnBeginGetSIPDomains(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string filterExpression = ((string)(inValues[0]));
            int offset = ((int)(inValues[1]));
            int count = ((int)(inValues[2]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetSIPDomains(filterExpression, offset, count, callback, asyncState);
        }
        
        private object[] OnEndGetSIPDomains(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDomain> retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetSIPDomains(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSIPDomainsCompleted(object state) {
            if ((this.GetSIPDomainsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSIPDomainsCompleted(this, new GetSIPDomainsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSIPDomainsAsync(string filterExpression, int offset, int count) {
            this.GetSIPDomainsAsync(filterExpression, offset, count, null);
        }
        
        public void GetSIPDomainsAsync(string filterExpression, int offset, int count, object userState) {
            if ((this.onBeginGetSIPDomainsDelegate == null)) {
                this.onBeginGetSIPDomainsDelegate = new BeginOperationDelegate(this.OnBeginGetSIPDomains);
            }
            if ((this.onEndGetSIPDomainsDelegate == null)) {
                this.onEndGetSIPDomainsDelegate = new EndOperationDelegate(this.OnEndGetSIPDomains);
            }
            if ((this.onGetSIPDomainsCompletedDelegate == null)) {
                this.onGetSIPDomainsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSIPDomainsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSIPDomainsDelegate, new object[] {
                        filterExpression,
                        offset,
                        count}, this.onEndGetSIPDomainsDelegate, this.onGetSIPDomainsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetSIPAccountsCount(string whereExpression, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSIPAccountsCount(whereExpression, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetSIPAccountsCount(System.IAsyncResult result) {
            return base.Channel.EndGetSIPAccountsCount(result);
        }
        
        private System.IAsyncResult OnBeginGetSIPAccountsCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string whereExpression = ((string)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetSIPAccountsCount(whereExpression, callback, asyncState);
        }
        
        private object[] OnEndGetSIPAccountsCount(System.IAsyncResult result) {
            int retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetSIPAccountsCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSIPAccountsCountCompleted(object state) {
            if ((this.GetSIPAccountsCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSIPAccountsCountCompleted(this, new GetSIPAccountsCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSIPAccountsCountAsync(string whereExpression) {
            this.GetSIPAccountsCountAsync(whereExpression, null);
        }
        
        public void GetSIPAccountsCountAsync(string whereExpression, object userState) {
            if ((this.onBeginGetSIPAccountsCountDelegate == null)) {
                this.onBeginGetSIPAccountsCountDelegate = new BeginOperationDelegate(this.OnBeginGetSIPAccountsCount);
            }
            if ((this.onEndGetSIPAccountsCountDelegate == null)) {
                this.onEndGetSIPAccountsCountDelegate = new EndOperationDelegate(this.OnEndGetSIPAccountsCount);
            }
            if ((this.onGetSIPAccountsCountCompletedDelegate == null)) {
                this.onGetSIPAccountsCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSIPAccountsCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetSIPAccountsCountDelegate, new object[] {
                        whereExpression}, this.onEndGetSIPAccountsCountDelegate, this.onGetSIPAccountsCountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetSIPAccounts(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSIPAccounts(whereExpression, offset, count, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPAccount> SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetSIPAccounts(System.IAsyncResult result) {
            return base.Channel.EndGetSIPAccounts(result);
        }
        
        private System.IAsyncResult OnBeginGetSIPAccounts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string whereExpression = ((string)(inValues[0]));
            int offset = ((int)(inValues[1]));
            int count = ((int)(inValues[2]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetSIPAccounts(whereExpression, offset, count, callback, asyncState);
        }
        
        private object[] OnEndGetSIPAccounts(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPAccount> retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetSIPAccounts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSIPAccountsCompleted(object state) {
            if ((this.GetSIPAccountsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSIPAccountsCompleted(this, new GetSIPAccountsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSIPAccountsAsync(string whereExpression, int offset, int count) {
            this.GetSIPAccountsAsync(whereExpression, offset, count, null);
        }
        
        public void GetSIPAccountsAsync(string whereExpression, int offset, int count, object userState) {
            if ((this.onBeginGetSIPAccountsDelegate == null)) {
                this.onBeginGetSIPAccountsDelegate = new BeginOperationDelegate(this.OnBeginGetSIPAccounts);
            }
            if ((this.onEndGetSIPAccountsDelegate == null)) {
                this.onEndGetSIPAccountsDelegate = new EndOperationDelegate(this.OnEndGetSIPAccounts);
            }
            if ((this.onGetSIPAccountsCompletedDelegate == null)) {
                this.onGetSIPAccountsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSIPAccountsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSIPAccountsDelegate, new object[] {
                        whereExpression,
                        offset,
                        count}, this.onEndGetSIPAccountsDelegate, this.onGetSIPAccountsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginAddSIPAccount(SIPSorcery.SIP.App.SIPAccount sipAccount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddSIPAccount(sipAccount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIPSorcery.SIP.App.SIPAccount SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndAddSIPAccount(System.IAsyncResult result) {
            return base.Channel.EndAddSIPAccount(result);
        }
        
        private System.IAsyncResult OnBeginAddSIPAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIPSorcery.SIP.App.SIPAccount sipAccount = ((SIPSorcery.SIP.App.SIPAccount)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginAddSIPAccount(sipAccount, callback, asyncState);
        }
        
        private object[] OnEndAddSIPAccount(System.IAsyncResult result) {
            SIPSorcery.SIP.App.SIPAccount retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndAddSIPAccount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddSIPAccountCompleted(object state) {
            if ((this.AddSIPAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddSIPAccountCompleted(this, new AddSIPAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddSIPAccountAsync(SIPSorcery.SIP.App.SIPAccount sipAccount) {
            this.AddSIPAccountAsync(sipAccount, null);
        }
        
        public void AddSIPAccountAsync(SIPSorcery.SIP.App.SIPAccount sipAccount, object userState) {
            if ((this.onBeginAddSIPAccountDelegate == null)) {
                this.onBeginAddSIPAccountDelegate = new BeginOperationDelegate(this.OnBeginAddSIPAccount);
            }
            if ((this.onEndAddSIPAccountDelegate == null)) {
                this.onEndAddSIPAccountDelegate = new EndOperationDelegate(this.OnEndAddSIPAccount);
            }
            if ((this.onAddSIPAccountCompletedDelegate == null)) {
                this.onAddSIPAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddSIPAccountCompleted);
            }
            base.InvokeAsync(this.onBeginAddSIPAccountDelegate, new object[] {
                        sipAccount}, this.onEndAddSIPAccountDelegate, this.onAddSIPAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginUpdateSIPAccount(SIPSorcery.SIP.App.SIPAccount sipAccount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateSIPAccount(sipAccount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIPSorcery.SIP.App.SIPAccount SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndUpdateSIPAccount(System.IAsyncResult result) {
            return base.Channel.EndUpdateSIPAccount(result);
        }
        
        private System.IAsyncResult OnBeginUpdateSIPAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIPSorcery.SIP.App.SIPAccount sipAccount = ((SIPSorcery.SIP.App.SIPAccount)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginUpdateSIPAccount(sipAccount, callback, asyncState);
        }
        
        private object[] OnEndUpdateSIPAccount(System.IAsyncResult result) {
            SIPSorcery.SIP.App.SIPAccount retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndUpdateSIPAccount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateSIPAccountCompleted(object state) {
            if ((this.UpdateSIPAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateSIPAccountCompleted(this, new UpdateSIPAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateSIPAccountAsync(SIPSorcery.SIP.App.SIPAccount sipAccount) {
            this.UpdateSIPAccountAsync(sipAccount, null);
        }
        
        public void UpdateSIPAccountAsync(SIPSorcery.SIP.App.SIPAccount sipAccount, object userState) {
            if ((this.onBeginUpdateSIPAccountDelegate == null)) {
                this.onBeginUpdateSIPAccountDelegate = new BeginOperationDelegate(this.OnBeginUpdateSIPAccount);
            }
            if ((this.onEndUpdateSIPAccountDelegate == null)) {
                this.onEndUpdateSIPAccountDelegate = new EndOperationDelegate(this.OnEndUpdateSIPAccount);
            }
            if ((this.onUpdateSIPAccountCompletedDelegate == null)) {
                this.onUpdateSIPAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateSIPAccountCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateSIPAccountDelegate, new object[] {
                        sipAccount}, this.onEndUpdateSIPAccountDelegate, this.onUpdateSIPAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginDeleteSIPAccount(SIPSorcery.SIP.App.SIPAccount sipAccount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteSIPAccount(sipAccount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIPSorcery.SIP.App.SIPAccount SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndDeleteSIPAccount(System.IAsyncResult result) {
            return base.Channel.EndDeleteSIPAccount(result);
        }
        
        private System.IAsyncResult OnBeginDeleteSIPAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIPSorcery.SIP.App.SIPAccount sipAccount = ((SIPSorcery.SIP.App.SIPAccount)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginDeleteSIPAccount(sipAccount, callback, asyncState);
        }
        
        private object[] OnEndDeleteSIPAccount(System.IAsyncResult result) {
            SIPSorcery.SIP.App.SIPAccount retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndDeleteSIPAccount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteSIPAccountCompleted(object state) {
            if ((this.DeleteSIPAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteSIPAccountCompleted(this, new DeleteSIPAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteSIPAccountAsync(SIPSorcery.SIP.App.SIPAccount sipAccount) {
            this.DeleteSIPAccountAsync(sipAccount, null);
        }
        
        public void DeleteSIPAccountAsync(SIPSorcery.SIP.App.SIPAccount sipAccount, object userState) {
            if ((this.onBeginDeleteSIPAccountDelegate == null)) {
                this.onBeginDeleteSIPAccountDelegate = new BeginOperationDelegate(this.OnBeginDeleteSIPAccount);
            }
            if ((this.onEndDeleteSIPAccountDelegate == null)) {
                this.onEndDeleteSIPAccountDelegate = new EndOperationDelegate(this.OnEndDeleteSIPAccount);
            }
            if ((this.onDeleteSIPAccountCompletedDelegate == null)) {
                this.onDeleteSIPAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteSIPAccountCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteSIPAccountDelegate, new object[] {
                        sipAccount}, this.onEndDeleteSIPAccountDelegate, this.onDeleteSIPAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetSIPRegistrarBindingsCount(string whereExpression, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSIPRegistrarBindingsCount(whereExpression, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetSIPRegistrarBindingsCount(System.IAsyncResult result) {
            return base.Channel.EndGetSIPRegistrarBindingsCount(result);
        }
        
        private System.IAsyncResult OnBeginGetSIPRegistrarBindingsCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string whereExpression = ((string)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetSIPRegistrarBindingsCount(whereExpression, callback, asyncState);
        }
        
        private object[] OnEndGetSIPRegistrarBindingsCount(System.IAsyncResult result) {
            int retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetSIPRegistrarBindingsCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSIPRegistrarBindingsCountCompleted(object state) {
            if ((this.GetSIPRegistrarBindingsCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSIPRegistrarBindingsCountCompleted(this, new GetSIPRegistrarBindingsCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSIPRegistrarBindingsCountAsync(string whereExpression) {
            this.GetSIPRegistrarBindingsCountAsync(whereExpression, null);
        }
        
        public void GetSIPRegistrarBindingsCountAsync(string whereExpression, object userState) {
            if ((this.onBeginGetSIPRegistrarBindingsCountDelegate == null)) {
                this.onBeginGetSIPRegistrarBindingsCountDelegate = new BeginOperationDelegate(this.OnBeginGetSIPRegistrarBindingsCount);
            }
            if ((this.onEndGetSIPRegistrarBindingsCountDelegate == null)) {
                this.onEndGetSIPRegistrarBindingsCountDelegate = new EndOperationDelegate(this.OnEndGetSIPRegistrarBindingsCount);
            }
            if ((this.onGetSIPRegistrarBindingsCountCompletedDelegate == null)) {
                this.onGetSIPRegistrarBindingsCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSIPRegistrarBindingsCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetSIPRegistrarBindingsCountDelegate, new object[] {
                        whereExpression}, this.onEndGetSIPRegistrarBindingsCountDelegate, this.onGetSIPRegistrarBindingsCountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetSIPRegistrarBindings(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSIPRegistrarBindings(whereExpression, offset, count, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPRegistrarBinding> SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetSIPRegistrarBindings(System.IAsyncResult result) {
            return base.Channel.EndGetSIPRegistrarBindings(result);
        }
        
        private System.IAsyncResult OnBeginGetSIPRegistrarBindings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string whereExpression = ((string)(inValues[0]));
            int offset = ((int)(inValues[1]));
            int count = ((int)(inValues[2]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetSIPRegistrarBindings(whereExpression, offset, count, callback, asyncState);
        }
        
        private object[] OnEndGetSIPRegistrarBindings(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPRegistrarBinding> retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetSIPRegistrarBindings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSIPRegistrarBindingsCompleted(object state) {
            if ((this.GetSIPRegistrarBindingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSIPRegistrarBindingsCompleted(this, new GetSIPRegistrarBindingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSIPRegistrarBindingsAsync(string whereExpression, int offset, int count) {
            this.GetSIPRegistrarBindingsAsync(whereExpression, offset, count, null);
        }
        
        public void GetSIPRegistrarBindingsAsync(string whereExpression, int offset, int count, object userState) {
            if ((this.onBeginGetSIPRegistrarBindingsDelegate == null)) {
                this.onBeginGetSIPRegistrarBindingsDelegate = new BeginOperationDelegate(this.OnBeginGetSIPRegistrarBindings);
            }
            if ((this.onEndGetSIPRegistrarBindingsDelegate == null)) {
                this.onEndGetSIPRegistrarBindingsDelegate = new EndOperationDelegate(this.OnEndGetSIPRegistrarBindings);
            }
            if ((this.onGetSIPRegistrarBindingsCompletedDelegate == null)) {
                this.onGetSIPRegistrarBindingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSIPRegistrarBindingsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSIPRegistrarBindingsDelegate, new object[] {
                        whereExpression,
                        offset,
                        count}, this.onEndGetSIPRegistrarBindingsDelegate, this.onGetSIPRegistrarBindingsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetSIPProvidersCount(string whereExpression, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSIPProvidersCount(whereExpression, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetSIPProvidersCount(System.IAsyncResult result) {
            return base.Channel.EndGetSIPProvidersCount(result);
        }
        
        private System.IAsyncResult OnBeginGetSIPProvidersCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string whereExpression = ((string)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetSIPProvidersCount(whereExpression, callback, asyncState);
        }
        
        private object[] OnEndGetSIPProvidersCount(System.IAsyncResult result) {
            int retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetSIPProvidersCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSIPProvidersCountCompleted(object state) {
            if ((this.GetSIPProvidersCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSIPProvidersCountCompleted(this, new GetSIPProvidersCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSIPProvidersCountAsync(string whereExpression) {
            this.GetSIPProvidersCountAsync(whereExpression, null);
        }
        
        public void GetSIPProvidersCountAsync(string whereExpression, object userState) {
            if ((this.onBeginGetSIPProvidersCountDelegate == null)) {
                this.onBeginGetSIPProvidersCountDelegate = new BeginOperationDelegate(this.OnBeginGetSIPProvidersCount);
            }
            if ((this.onEndGetSIPProvidersCountDelegate == null)) {
                this.onEndGetSIPProvidersCountDelegate = new EndOperationDelegate(this.OnEndGetSIPProvidersCount);
            }
            if ((this.onGetSIPProvidersCountCompletedDelegate == null)) {
                this.onGetSIPProvidersCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSIPProvidersCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetSIPProvidersCountDelegate, new object[] {
                        whereExpression}, this.onEndGetSIPProvidersCountDelegate, this.onGetSIPProvidersCountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetSIPProviders(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSIPProviders(whereExpression, offset, count, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProvider> SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetSIPProviders(System.IAsyncResult result) {
            return base.Channel.EndGetSIPProviders(result);
        }
        
        private System.IAsyncResult OnBeginGetSIPProviders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string whereExpression = ((string)(inValues[0]));
            int offset = ((int)(inValues[1]));
            int count = ((int)(inValues[2]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetSIPProviders(whereExpression, offset, count, callback, asyncState);
        }
        
        private object[] OnEndGetSIPProviders(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProvider> retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetSIPProviders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSIPProvidersCompleted(object state) {
            if ((this.GetSIPProvidersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSIPProvidersCompleted(this, new GetSIPProvidersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSIPProvidersAsync(string whereExpression, int offset, int count) {
            this.GetSIPProvidersAsync(whereExpression, offset, count, null);
        }
        
        public void GetSIPProvidersAsync(string whereExpression, int offset, int count, object userState) {
            if ((this.onBeginGetSIPProvidersDelegate == null)) {
                this.onBeginGetSIPProvidersDelegate = new BeginOperationDelegate(this.OnBeginGetSIPProviders);
            }
            if ((this.onEndGetSIPProvidersDelegate == null)) {
                this.onEndGetSIPProvidersDelegate = new EndOperationDelegate(this.OnEndGetSIPProviders);
            }
            if ((this.onGetSIPProvidersCompletedDelegate == null)) {
                this.onGetSIPProvidersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSIPProvidersCompleted);
            }
            base.InvokeAsync(this.onBeginGetSIPProvidersDelegate, new object[] {
                        whereExpression,
                        offset,
                        count}, this.onEndGetSIPProvidersDelegate, this.onGetSIPProvidersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginAddSIPProvider(SIPSorcery.SIP.App.SIPProvider sipProvider, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddSIPProvider(sipProvider, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIPSorcery.SIP.App.SIPProvider SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndAddSIPProvider(System.IAsyncResult result) {
            return base.Channel.EndAddSIPProvider(result);
        }
        
        private System.IAsyncResult OnBeginAddSIPProvider(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIPSorcery.SIP.App.SIPProvider sipProvider = ((SIPSorcery.SIP.App.SIPProvider)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginAddSIPProvider(sipProvider, callback, asyncState);
        }
        
        private object[] OnEndAddSIPProvider(System.IAsyncResult result) {
            SIPSorcery.SIP.App.SIPProvider retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndAddSIPProvider(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddSIPProviderCompleted(object state) {
            if ((this.AddSIPProviderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddSIPProviderCompleted(this, new AddSIPProviderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddSIPProviderAsync(SIPSorcery.SIP.App.SIPProvider sipProvider) {
            this.AddSIPProviderAsync(sipProvider, null);
        }
        
        public void AddSIPProviderAsync(SIPSorcery.SIP.App.SIPProvider sipProvider, object userState) {
            if ((this.onBeginAddSIPProviderDelegate == null)) {
                this.onBeginAddSIPProviderDelegate = new BeginOperationDelegate(this.OnBeginAddSIPProvider);
            }
            if ((this.onEndAddSIPProviderDelegate == null)) {
                this.onEndAddSIPProviderDelegate = new EndOperationDelegate(this.OnEndAddSIPProvider);
            }
            if ((this.onAddSIPProviderCompletedDelegate == null)) {
                this.onAddSIPProviderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddSIPProviderCompleted);
            }
            base.InvokeAsync(this.onBeginAddSIPProviderDelegate, new object[] {
                        sipProvider}, this.onEndAddSIPProviderDelegate, this.onAddSIPProviderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginUpdateSIPProvider(SIPSorcery.SIP.App.SIPProvider sipProvider, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateSIPProvider(sipProvider, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIPSorcery.SIP.App.SIPProvider SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndUpdateSIPProvider(System.IAsyncResult result) {
            return base.Channel.EndUpdateSIPProvider(result);
        }
        
        private System.IAsyncResult OnBeginUpdateSIPProvider(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIPSorcery.SIP.App.SIPProvider sipProvider = ((SIPSorcery.SIP.App.SIPProvider)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginUpdateSIPProvider(sipProvider, callback, asyncState);
        }
        
        private object[] OnEndUpdateSIPProvider(System.IAsyncResult result) {
            SIPSorcery.SIP.App.SIPProvider retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndUpdateSIPProvider(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateSIPProviderCompleted(object state) {
            if ((this.UpdateSIPProviderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateSIPProviderCompleted(this, new UpdateSIPProviderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateSIPProviderAsync(SIPSorcery.SIP.App.SIPProvider sipProvider) {
            this.UpdateSIPProviderAsync(sipProvider, null);
        }
        
        public void UpdateSIPProviderAsync(SIPSorcery.SIP.App.SIPProvider sipProvider, object userState) {
            if ((this.onBeginUpdateSIPProviderDelegate == null)) {
                this.onBeginUpdateSIPProviderDelegate = new BeginOperationDelegate(this.OnBeginUpdateSIPProvider);
            }
            if ((this.onEndUpdateSIPProviderDelegate == null)) {
                this.onEndUpdateSIPProviderDelegate = new EndOperationDelegate(this.OnEndUpdateSIPProvider);
            }
            if ((this.onUpdateSIPProviderCompletedDelegate == null)) {
                this.onUpdateSIPProviderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateSIPProviderCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateSIPProviderDelegate, new object[] {
                        sipProvider}, this.onEndUpdateSIPProviderDelegate, this.onUpdateSIPProviderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginDeleteSIPProvider(SIPSorcery.SIP.App.SIPProvider sipProvider, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteSIPProvider(sipProvider, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIPSorcery.SIP.App.SIPProvider SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndDeleteSIPProvider(System.IAsyncResult result) {
            return base.Channel.EndDeleteSIPProvider(result);
        }
        
        private System.IAsyncResult OnBeginDeleteSIPProvider(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIPSorcery.SIP.App.SIPProvider sipProvider = ((SIPSorcery.SIP.App.SIPProvider)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginDeleteSIPProvider(sipProvider, callback, asyncState);
        }
        
        private object[] OnEndDeleteSIPProvider(System.IAsyncResult result) {
            SIPSorcery.SIP.App.SIPProvider retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndDeleteSIPProvider(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteSIPProviderCompleted(object state) {
            if ((this.DeleteSIPProviderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteSIPProviderCompleted(this, new DeleteSIPProviderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteSIPProviderAsync(SIPSorcery.SIP.App.SIPProvider sipProvider) {
            this.DeleteSIPProviderAsync(sipProvider, null);
        }
        
        public void DeleteSIPProviderAsync(SIPSorcery.SIP.App.SIPProvider sipProvider, object userState) {
            if ((this.onBeginDeleteSIPProviderDelegate == null)) {
                this.onBeginDeleteSIPProviderDelegate = new BeginOperationDelegate(this.OnBeginDeleteSIPProvider);
            }
            if ((this.onEndDeleteSIPProviderDelegate == null)) {
                this.onEndDeleteSIPProviderDelegate = new EndOperationDelegate(this.OnEndDeleteSIPProvider);
            }
            if ((this.onDeleteSIPProviderCompletedDelegate == null)) {
                this.onDeleteSIPProviderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteSIPProviderCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteSIPProviderDelegate, new object[] {
                        sipProvider}, this.onEndDeleteSIPProviderDelegate, this.onDeleteSIPProviderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetSIPProviderBindingsCount(string whereExpression, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSIPProviderBindingsCount(whereExpression, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetSIPProviderBindingsCount(System.IAsyncResult result) {
            return base.Channel.EndGetSIPProviderBindingsCount(result);
        }
        
        private System.IAsyncResult OnBeginGetSIPProviderBindingsCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string whereExpression = ((string)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetSIPProviderBindingsCount(whereExpression, callback, asyncState);
        }
        
        private object[] OnEndGetSIPProviderBindingsCount(System.IAsyncResult result) {
            int retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetSIPProviderBindingsCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSIPProviderBindingsCountCompleted(object state) {
            if ((this.GetSIPProviderBindingsCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSIPProviderBindingsCountCompleted(this, new GetSIPProviderBindingsCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSIPProviderBindingsCountAsync(string whereExpression) {
            this.GetSIPProviderBindingsCountAsync(whereExpression, null);
        }
        
        public void GetSIPProviderBindingsCountAsync(string whereExpression, object userState) {
            if ((this.onBeginGetSIPProviderBindingsCountDelegate == null)) {
                this.onBeginGetSIPProviderBindingsCountDelegate = new BeginOperationDelegate(this.OnBeginGetSIPProviderBindingsCount);
            }
            if ((this.onEndGetSIPProviderBindingsCountDelegate == null)) {
                this.onEndGetSIPProviderBindingsCountDelegate = new EndOperationDelegate(this.OnEndGetSIPProviderBindingsCount);
            }
            if ((this.onGetSIPProviderBindingsCountCompletedDelegate == null)) {
                this.onGetSIPProviderBindingsCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSIPProviderBindingsCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetSIPProviderBindingsCountDelegate, new object[] {
                        whereExpression}, this.onEndGetSIPProviderBindingsCountDelegate, this.onGetSIPProviderBindingsCountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetSIPProviderBindings(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSIPProviderBindings(whereExpression, offset, count, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProviderBinding> SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetSIPProviderBindings(System.IAsyncResult result) {
            return base.Channel.EndGetSIPProviderBindings(result);
        }
        
        private System.IAsyncResult OnBeginGetSIPProviderBindings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string whereExpression = ((string)(inValues[0]));
            int offset = ((int)(inValues[1]));
            int count = ((int)(inValues[2]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetSIPProviderBindings(whereExpression, offset, count, callback, asyncState);
        }
        
        private object[] OnEndGetSIPProviderBindings(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProviderBinding> retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetSIPProviderBindings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSIPProviderBindingsCompleted(object state) {
            if ((this.GetSIPProviderBindingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSIPProviderBindingsCompleted(this, new GetSIPProviderBindingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSIPProviderBindingsAsync(string whereExpression, int offset, int count) {
            this.GetSIPProviderBindingsAsync(whereExpression, offset, count, null);
        }
        
        public void GetSIPProviderBindingsAsync(string whereExpression, int offset, int count, object userState) {
            if ((this.onBeginGetSIPProviderBindingsDelegate == null)) {
                this.onBeginGetSIPProviderBindingsDelegate = new BeginOperationDelegate(this.OnBeginGetSIPProviderBindings);
            }
            if ((this.onEndGetSIPProviderBindingsDelegate == null)) {
                this.onEndGetSIPProviderBindingsDelegate = new EndOperationDelegate(this.OnEndGetSIPProviderBindings);
            }
            if ((this.onGetSIPProviderBindingsCompletedDelegate == null)) {
                this.onGetSIPProviderBindingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSIPProviderBindingsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSIPProviderBindingsDelegate, new object[] {
                        whereExpression,
                        offset,
                        count}, this.onEndGetSIPProviderBindingsDelegate, this.onGetSIPProviderBindingsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetDialPlansCount(string whereExpression, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDialPlansCount(whereExpression, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetDialPlansCount(System.IAsyncResult result) {
            return base.Channel.EndGetDialPlansCount(result);
        }
        
        private System.IAsyncResult OnBeginGetDialPlansCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string whereExpression = ((string)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetDialPlansCount(whereExpression, callback, asyncState);
        }
        
        private object[] OnEndGetDialPlansCount(System.IAsyncResult result) {
            int retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetDialPlansCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDialPlansCountCompleted(object state) {
            if ((this.GetDialPlansCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDialPlansCountCompleted(this, new GetDialPlansCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDialPlansCountAsync(string whereExpression) {
            this.GetDialPlansCountAsync(whereExpression, null);
        }
        
        public void GetDialPlansCountAsync(string whereExpression, object userState) {
            if ((this.onBeginGetDialPlansCountDelegate == null)) {
                this.onBeginGetDialPlansCountDelegate = new BeginOperationDelegate(this.OnBeginGetDialPlansCount);
            }
            if ((this.onEndGetDialPlansCountDelegate == null)) {
                this.onEndGetDialPlansCountDelegate = new EndOperationDelegate(this.OnEndGetDialPlansCount);
            }
            if ((this.onGetDialPlansCountCompletedDelegate == null)) {
                this.onGetDialPlansCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDialPlansCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetDialPlansCountDelegate, new object[] {
                        whereExpression}, this.onEndGetDialPlansCountDelegate, this.onGetDialPlansCountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetDialPlans(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDialPlans(whereExpression, offset, count, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialPlan> SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetDialPlans(System.IAsyncResult result) {
            return base.Channel.EndGetDialPlans(result);
        }
        
        private System.IAsyncResult OnBeginGetDialPlans(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string whereExpression = ((string)(inValues[0]));
            int offset = ((int)(inValues[1]));
            int count = ((int)(inValues[2]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetDialPlans(whereExpression, offset, count, callback, asyncState);
        }
        
        private object[] OnEndGetDialPlans(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialPlan> retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetDialPlans(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDialPlansCompleted(object state) {
            if ((this.GetDialPlansCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDialPlansCompleted(this, new GetDialPlansCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDialPlansAsync(string whereExpression, int offset, int count) {
            this.GetDialPlansAsync(whereExpression, offset, count, null);
        }
        
        public void GetDialPlansAsync(string whereExpression, int offset, int count, object userState) {
            if ((this.onBeginGetDialPlansDelegate == null)) {
                this.onBeginGetDialPlansDelegate = new BeginOperationDelegate(this.OnBeginGetDialPlans);
            }
            if ((this.onEndGetDialPlansDelegate == null)) {
                this.onEndGetDialPlansDelegate = new EndOperationDelegate(this.OnEndGetDialPlans);
            }
            if ((this.onGetDialPlansCompletedDelegate == null)) {
                this.onGetDialPlansCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDialPlansCompleted);
            }
            base.InvokeAsync(this.onBeginGetDialPlansDelegate, new object[] {
                        whereExpression,
                        offset,
                        count}, this.onEndGetDialPlansDelegate, this.onGetDialPlansCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginAddDialPlan(SIPSorcery.SIP.App.SIPDialPlan dialPlan, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddDialPlan(dialPlan, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIPSorcery.SIP.App.SIPDialPlan SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndAddDialPlan(System.IAsyncResult result) {
            return base.Channel.EndAddDialPlan(result);
        }
        
        private System.IAsyncResult OnBeginAddDialPlan(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIPSorcery.SIP.App.SIPDialPlan dialPlan = ((SIPSorcery.SIP.App.SIPDialPlan)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginAddDialPlan(dialPlan, callback, asyncState);
        }
        
        private object[] OnEndAddDialPlan(System.IAsyncResult result) {
            SIPSorcery.SIP.App.SIPDialPlan retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndAddDialPlan(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddDialPlanCompleted(object state) {
            if ((this.AddDialPlanCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddDialPlanCompleted(this, new AddDialPlanCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddDialPlanAsync(SIPSorcery.SIP.App.SIPDialPlan dialPlan) {
            this.AddDialPlanAsync(dialPlan, null);
        }
        
        public void AddDialPlanAsync(SIPSorcery.SIP.App.SIPDialPlan dialPlan, object userState) {
            if ((this.onBeginAddDialPlanDelegate == null)) {
                this.onBeginAddDialPlanDelegate = new BeginOperationDelegate(this.OnBeginAddDialPlan);
            }
            if ((this.onEndAddDialPlanDelegate == null)) {
                this.onEndAddDialPlanDelegate = new EndOperationDelegate(this.OnEndAddDialPlan);
            }
            if ((this.onAddDialPlanCompletedDelegate == null)) {
                this.onAddDialPlanCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddDialPlanCompleted);
            }
            base.InvokeAsync(this.onBeginAddDialPlanDelegate, new object[] {
                        dialPlan}, this.onEndAddDialPlanDelegate, this.onAddDialPlanCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginUpdateDialPlan(SIPSorcery.SIP.App.SIPDialPlan dialPlan, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateDialPlan(dialPlan, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIPSorcery.SIP.App.SIPDialPlan SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndUpdateDialPlan(System.IAsyncResult result) {
            return base.Channel.EndUpdateDialPlan(result);
        }
        
        private System.IAsyncResult OnBeginUpdateDialPlan(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIPSorcery.SIP.App.SIPDialPlan dialPlan = ((SIPSorcery.SIP.App.SIPDialPlan)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginUpdateDialPlan(dialPlan, callback, asyncState);
        }
        
        private object[] OnEndUpdateDialPlan(System.IAsyncResult result) {
            SIPSorcery.SIP.App.SIPDialPlan retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndUpdateDialPlan(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateDialPlanCompleted(object state) {
            if ((this.UpdateDialPlanCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateDialPlanCompleted(this, new UpdateDialPlanCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateDialPlanAsync(SIPSorcery.SIP.App.SIPDialPlan dialPlan) {
            this.UpdateDialPlanAsync(dialPlan, null);
        }
        
        public void UpdateDialPlanAsync(SIPSorcery.SIP.App.SIPDialPlan dialPlan, object userState) {
            if ((this.onBeginUpdateDialPlanDelegate == null)) {
                this.onBeginUpdateDialPlanDelegate = new BeginOperationDelegate(this.OnBeginUpdateDialPlan);
            }
            if ((this.onEndUpdateDialPlanDelegate == null)) {
                this.onEndUpdateDialPlanDelegate = new EndOperationDelegate(this.OnEndUpdateDialPlan);
            }
            if ((this.onUpdateDialPlanCompletedDelegate == null)) {
                this.onUpdateDialPlanCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateDialPlanCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDialPlanDelegate, new object[] {
                        dialPlan}, this.onEndUpdateDialPlanDelegate, this.onUpdateDialPlanCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginDeleteDialPlan(SIPSorcery.SIP.App.SIPDialPlan dialPlan, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteDialPlan(dialPlan, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIPSorcery.SIP.App.SIPDialPlan SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndDeleteDialPlan(System.IAsyncResult result) {
            return base.Channel.EndDeleteDialPlan(result);
        }
        
        private System.IAsyncResult OnBeginDeleteDialPlan(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIPSorcery.SIP.App.SIPDialPlan dialPlan = ((SIPSorcery.SIP.App.SIPDialPlan)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginDeleteDialPlan(dialPlan, callback, asyncState);
        }
        
        private object[] OnEndDeleteDialPlan(System.IAsyncResult result) {
            SIPSorcery.SIP.App.SIPDialPlan retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndDeleteDialPlan(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteDialPlanCompleted(object state) {
            if ((this.DeleteDialPlanCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteDialPlanCompleted(this, new DeleteDialPlanCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteDialPlanAsync(SIPSorcery.SIP.App.SIPDialPlan dialPlan) {
            this.DeleteDialPlanAsync(dialPlan, null);
        }
        
        public void DeleteDialPlanAsync(SIPSorcery.SIP.App.SIPDialPlan dialPlan, object userState) {
            if ((this.onBeginDeleteDialPlanDelegate == null)) {
                this.onBeginDeleteDialPlanDelegate = new BeginOperationDelegate(this.OnBeginDeleteDialPlan);
            }
            if ((this.onEndDeleteDialPlanDelegate == null)) {
                this.onEndDeleteDialPlanDelegate = new EndOperationDelegate(this.OnEndDeleteDialPlan);
            }
            if ((this.onDeleteDialPlanCompletedDelegate == null)) {
                this.onDeleteDialPlanCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteDialPlanCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDialPlanDelegate, new object[] {
                        dialPlan}, this.onEndDeleteDialPlanDelegate, this.onDeleteDialPlanCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetCallsCount(string whereExpression, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCallsCount(whereExpression, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetCallsCount(System.IAsyncResult result) {
            return base.Channel.EndGetCallsCount(result);
        }
        
        private System.IAsyncResult OnBeginGetCallsCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string whereExpression = ((string)(inValues[0]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetCallsCount(whereExpression, callback, asyncState);
        }
        
        private object[] OnEndGetCallsCount(System.IAsyncResult result) {
            int retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetCallsCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCallsCountCompleted(object state) {
            if ((this.GetCallsCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCallsCountCompleted(this, new GetCallsCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCallsCountAsync(string whereExpression) {
            this.GetCallsCountAsync(whereExpression, null);
        }
        
        public void GetCallsCountAsync(string whereExpression, object userState) {
            if ((this.onBeginGetCallsCountDelegate == null)) {
                this.onBeginGetCallsCountDelegate = new BeginOperationDelegate(this.OnBeginGetCallsCount);
            }
            if ((this.onEndGetCallsCountDelegate == null)) {
                this.onEndGetCallsCountDelegate = new EndOperationDelegate(this.OnEndGetCallsCount);
            }
            if ((this.onGetCallsCountCompletedDelegate == null)) {
                this.onGetCallsCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCallsCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetCallsCountDelegate, new object[] {
                        whereExpression}, this.onEndGetCallsCountDelegate, this.onGetCallsCountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.BeginGetCalls(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCalls(whereExpression, offset, count, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialogueAsset> SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService.EndGetCalls(System.IAsyncResult result) {
            return base.Channel.EndGetCalls(result);
        }
        
        private System.IAsyncResult OnBeginGetCalls(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string whereExpression = ((string)(inValues[0]));
            int offset = ((int)(inValues[1]));
            int count = ((int)(inValues[2]));
            return ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).BeginGetCalls(whereExpression, offset, count, callback, asyncState);
        }
        
        private object[] OnEndGetCalls(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialogueAsset> retVal = ((SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService)(this)).EndGetCalls(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCallsCompleted(object state) {
            if ((this.GetCallsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCallsCompleted(this, new GetCallsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCallsAsync(string whereExpression, int offset, int count) {
            this.GetCallsAsync(whereExpression, offset, count, null);
        }
        
        public void GetCallsAsync(string whereExpression, int offset, int count, object userState) {
            if ((this.onBeginGetCallsDelegate == null)) {
                this.onBeginGetCallsDelegate = new BeginOperationDelegate(this.OnBeginGetCalls);
            }
            if ((this.onEndGetCallsDelegate == null)) {
                this.onEndGetCallsDelegate = new EndOperationDelegate(this.OnEndGetCalls);
            }
            if ((this.onGetCallsCompletedDelegate == null)) {
                this.onGetCallsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCallsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCallsDelegate, new object[] {
                        whereExpression,
                        offset,
                        count}, this.onEndGetCallsDelegate, this.onGetCallsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService CreateChannel() {
            return new ProvisioningServiceClientChannel(this);
        }
        
        private class ProvisioningServiceClientChannel : ChannelBase<SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService>, SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService {
            
            public ProvisioningServiceClientChannel(System.ServiceModel.ClientBase<SIPSorcery.SIPSorceryProvisioningClient.IProvisioningService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetCDRsCount(string whereExpression, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = whereExpression;
                System.IAsyncResult _result = base.BeginInvoke("GetCDRsCount", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetCDRsCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetCDRsCount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCDRs(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = whereExpression;
                _args[1] = offset;
                _args[2] = count;
                System.IAsyncResult _result = base.BeginInvoke("GetCDRs", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPCDRAsset> EndGetCDRs(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPCDRAsset> _result = ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPCDRAsset>)(base.EndInvoke("GetCDRs", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginExtendSession(int minutes, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = minutes;
                System.IAsyncResult _result = base.BeginInvoke("ExtendSession", _args, callback, asyncState);
                return _result;
            }
            
            public void EndExtendSession(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ExtendSession", _args, result);
            }
            
            public System.IAsyncResult BeginGetTimeZoneOffsetMinutes(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetTimeZoneOffsetMinutes", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetTimeZoneOffsetMinutes(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetTimeZoneOffsetMinutes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsAlive(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("IsAlive", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsAlive(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsAlive", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTestException(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("TestException", _args, callback, asyncState);
                return _result;
            }
            
            public void EndTestException(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("TestException", _args, result);
            }
            
            public System.IAsyncResult BeginAreNewAccountsEnabled(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("AreNewAccountsEnabled", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAreNewAccountsEnabled(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AreNewAccountsEnabled", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateCustomer(SIPSorcery.CRM.Customer customer, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = customer;
                System.IAsyncResult _result = base.BeginInvoke("CreateCustomer", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateCustomer(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateCustomer", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteCustomer(string customerUsername, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = customerUsername;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCustomer", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteCustomer(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteCustomer", _args, result);
            }
            
            public System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public string EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Logout", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLogout(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Logout", _args, result);
            }
            
            public System.IAsyncResult BeginGetCustomer(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("GetCustomer", _args, callback, asyncState);
                return _result;
            }
            
            public SIPSorcery.CRM.Customer EndGetCustomer(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIPSorcery.CRM.Customer _result = ((SIPSorcery.CRM.Customer)(base.EndInvoke("GetCustomer", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateCustomer(SIPSorcery.CRM.Customer customer, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = customer;
                System.IAsyncResult _result = base.BeginInvoke("UpdateCustomer", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateCustomer(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateCustomer", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateCustomerPassword(string username, string oldPassword, string newPassword, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = username;
                _args[1] = oldPassword;
                _args[2] = newPassword;
                System.IAsyncResult _result = base.BeginInvoke("UpdateCustomerPassword", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateCustomerPassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateCustomerPassword", _args, result);
            }
            
            public System.IAsyncResult BeginGetSIPDomains(string filterExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = filterExpression;
                _args[1] = offset;
                _args[2] = count;
                System.IAsyncResult _result = base.BeginInvoke("GetSIPDomains", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDomain> EndGetSIPDomains(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDomain> _result = ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDomain>)(base.EndInvoke("GetSIPDomains", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSIPAccountsCount(string whereExpression, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = whereExpression;
                System.IAsyncResult _result = base.BeginInvoke("GetSIPAccountsCount", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetSIPAccountsCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetSIPAccountsCount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSIPAccounts(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = whereExpression;
                _args[1] = offset;
                _args[2] = count;
                System.IAsyncResult _result = base.BeginInvoke("GetSIPAccounts", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPAccount> EndGetSIPAccounts(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPAccount> _result = ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPAccount>)(base.EndInvoke("GetSIPAccounts", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddSIPAccount(SIPSorcery.SIP.App.SIPAccount sipAccount, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sipAccount;
                System.IAsyncResult _result = base.BeginInvoke("AddSIPAccount", _args, callback, asyncState);
                return _result;
            }
            
            public SIPSorcery.SIP.App.SIPAccount EndAddSIPAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIPSorcery.SIP.App.SIPAccount _result = ((SIPSorcery.SIP.App.SIPAccount)(base.EndInvoke("AddSIPAccount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateSIPAccount(SIPSorcery.SIP.App.SIPAccount sipAccount, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sipAccount;
                System.IAsyncResult _result = base.BeginInvoke("UpdateSIPAccount", _args, callback, asyncState);
                return _result;
            }
            
            public SIPSorcery.SIP.App.SIPAccount EndUpdateSIPAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIPSorcery.SIP.App.SIPAccount _result = ((SIPSorcery.SIP.App.SIPAccount)(base.EndInvoke("UpdateSIPAccount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteSIPAccount(SIPSorcery.SIP.App.SIPAccount sipAccount, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sipAccount;
                System.IAsyncResult _result = base.BeginInvoke("DeleteSIPAccount", _args, callback, asyncState);
                return _result;
            }
            
            public SIPSorcery.SIP.App.SIPAccount EndDeleteSIPAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIPSorcery.SIP.App.SIPAccount _result = ((SIPSorcery.SIP.App.SIPAccount)(base.EndInvoke("DeleteSIPAccount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSIPRegistrarBindingsCount(string whereExpression, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = whereExpression;
                System.IAsyncResult _result = base.BeginInvoke("GetSIPRegistrarBindingsCount", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetSIPRegistrarBindingsCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetSIPRegistrarBindingsCount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSIPRegistrarBindings(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = whereExpression;
                _args[1] = offset;
                _args[2] = count;
                System.IAsyncResult _result = base.BeginInvoke("GetSIPRegistrarBindings", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPRegistrarBinding> EndGetSIPRegistrarBindings(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPRegistrarBinding> _result = ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPRegistrarBinding>)(base.EndInvoke("GetSIPRegistrarBindings", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSIPProvidersCount(string whereExpression, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = whereExpression;
                System.IAsyncResult _result = base.BeginInvoke("GetSIPProvidersCount", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetSIPProvidersCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetSIPProvidersCount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSIPProviders(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = whereExpression;
                _args[1] = offset;
                _args[2] = count;
                System.IAsyncResult _result = base.BeginInvoke("GetSIPProviders", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProvider> EndGetSIPProviders(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProvider> _result = ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProvider>)(base.EndInvoke("GetSIPProviders", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddSIPProvider(SIPSorcery.SIP.App.SIPProvider sipProvider, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sipProvider;
                System.IAsyncResult _result = base.BeginInvoke("AddSIPProvider", _args, callback, asyncState);
                return _result;
            }
            
            public SIPSorcery.SIP.App.SIPProvider EndAddSIPProvider(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIPSorcery.SIP.App.SIPProvider _result = ((SIPSorcery.SIP.App.SIPProvider)(base.EndInvoke("AddSIPProvider", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateSIPProvider(SIPSorcery.SIP.App.SIPProvider sipProvider, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sipProvider;
                System.IAsyncResult _result = base.BeginInvoke("UpdateSIPProvider", _args, callback, asyncState);
                return _result;
            }
            
            public SIPSorcery.SIP.App.SIPProvider EndUpdateSIPProvider(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIPSorcery.SIP.App.SIPProvider _result = ((SIPSorcery.SIP.App.SIPProvider)(base.EndInvoke("UpdateSIPProvider", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteSIPProvider(SIPSorcery.SIP.App.SIPProvider sipProvider, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sipProvider;
                System.IAsyncResult _result = base.BeginInvoke("DeleteSIPProvider", _args, callback, asyncState);
                return _result;
            }
            
            public SIPSorcery.SIP.App.SIPProvider EndDeleteSIPProvider(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIPSorcery.SIP.App.SIPProvider _result = ((SIPSorcery.SIP.App.SIPProvider)(base.EndInvoke("DeleteSIPProvider", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSIPProviderBindingsCount(string whereExpression, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = whereExpression;
                System.IAsyncResult _result = base.BeginInvoke("GetSIPProviderBindingsCount", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetSIPProviderBindingsCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetSIPProviderBindingsCount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSIPProviderBindings(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = whereExpression;
                _args[1] = offset;
                _args[2] = count;
                System.IAsyncResult _result = base.BeginInvoke("GetSIPProviderBindings", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProviderBinding> EndGetSIPProviderBindings(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProviderBinding> _result = ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPProviderBinding>)(base.EndInvoke("GetSIPProviderBindings", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDialPlansCount(string whereExpression, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = whereExpression;
                System.IAsyncResult _result = base.BeginInvoke("GetDialPlansCount", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetDialPlansCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetDialPlansCount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDialPlans(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = whereExpression;
                _args[1] = offset;
                _args[2] = count;
                System.IAsyncResult _result = base.BeginInvoke("GetDialPlans", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialPlan> EndGetDialPlans(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialPlan> _result = ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialPlan>)(base.EndInvoke("GetDialPlans", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddDialPlan(SIPSorcery.SIP.App.SIPDialPlan dialPlan, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = dialPlan;
                System.IAsyncResult _result = base.BeginInvoke("AddDialPlan", _args, callback, asyncState);
                return _result;
            }
            
            public SIPSorcery.SIP.App.SIPDialPlan EndAddDialPlan(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIPSorcery.SIP.App.SIPDialPlan _result = ((SIPSorcery.SIP.App.SIPDialPlan)(base.EndInvoke("AddDialPlan", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateDialPlan(SIPSorcery.SIP.App.SIPDialPlan dialPlan, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = dialPlan;
                System.IAsyncResult _result = base.BeginInvoke("UpdateDialPlan", _args, callback, asyncState);
                return _result;
            }
            
            public SIPSorcery.SIP.App.SIPDialPlan EndUpdateDialPlan(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIPSorcery.SIP.App.SIPDialPlan _result = ((SIPSorcery.SIP.App.SIPDialPlan)(base.EndInvoke("UpdateDialPlan", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteDialPlan(SIPSorcery.SIP.App.SIPDialPlan dialPlan, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = dialPlan;
                System.IAsyncResult _result = base.BeginInvoke("DeleteDialPlan", _args, callback, asyncState);
                return _result;
            }
            
            public SIPSorcery.SIP.App.SIPDialPlan EndDeleteDialPlan(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIPSorcery.SIP.App.SIPDialPlan _result = ((SIPSorcery.SIP.App.SIPDialPlan)(base.EndInvoke("DeleteDialPlan", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCallsCount(string whereExpression, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = whereExpression;
                System.IAsyncResult _result = base.BeginInvoke("GetCallsCount", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetCallsCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetCallsCount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCalls(string whereExpression, int offset, int count, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = whereExpression;
                _args[1] = offset;
                _args[2] = count;
                System.IAsyncResult _result = base.BeginInvoke("GetCalls", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialogueAsset> EndGetCalls(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialogueAsset> _result = ((System.Collections.ObjectModel.ObservableCollection<SIPSorcery.SIP.App.SIPDialogueAsset>)(base.EndInvoke("GetCalls", _args, result)));
                return _result;
            }
        }
    }
}
