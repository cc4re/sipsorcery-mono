//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace SIPSorcery.SIPSorceryNotificationService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.sipsorcery.com/notifications/pull", ConfigurationName="SIPSorceryNotificationService.INotifications")]
    public interface INotifications {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/notifications/pull/INotifications/IsAlive", ReplyAction="http://www.sipsorcery.com/notifications/pull/INotifications/IsAliveResponse")]
        System.IAsyncResult BeginIsAlive(System.AsyncCallback callback, object asyncState);
        
        bool EndIsAlive(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/notifications/pull/INotifications/Login", ReplyAction="http://www.sipsorcery.com/notifications/pull/INotifications/LoginResponse")]
        System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState);
        
        string EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/notifications/pull/INotifications/Logout", ReplyAction="http://www.sipsorcery.com/notifications/pull/INotifications/LogoutResponse")]
        System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState);
        
        void EndLogout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/notifications/pull/INotifications/GetPollPeriod", ReplyAction="http://www.sipsorcery.com/notifications/pull/INotifications/GetPollPeriodResponse" +
            "")]
        System.IAsyncResult BeginGetPollPeriod(System.AsyncCallback callback, object asyncState);
        
        int EndGetPollPeriod(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/notifications/pull/INotifications/Subscribe", ReplyAction="http://www.sipsorcery.com/notifications/pull/INotifications/SubscribeResponse")]
        System.IAsyncResult BeginSubscribe(string subject, string filter, System.AsyncCallback callback, object asyncState);
        
        string EndSubscribe(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/notifications/pull/INotifications/SubscribeForAddress", ReplyAction="http://www.sipsorcery.com/notifications/pull/INotifications/SubscribeForAddressRe" +
            "sponse")]
        System.IAsyncResult BeginSubscribeForAddress(string subject, string filter, string addressID, System.AsyncCallback callback, object asyncState);
        
        string EndSubscribeForAddress(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/notifications/pull/INotifications/GetNotifications", ReplyAction="http://www.sipsorcery.com/notifications/pull/INotifications/GetNotificationsRespo" +
            "nse")]
        System.IAsyncResult BeginGetNotifications(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> EndGetNotifications(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/notifications/pull/INotifications/GetNotificationsForAd" +
            "dress", ReplyAction="http://www.sipsorcery.com/notifications/pull/INotifications/GetNotificationsForAd" +
            "dressResponse")]
        System.IAsyncResult BeginGetNotificationsForAddress(string addressID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> EndGetNotificationsForAddress(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/notifications/pull/INotifications/CloseSession", ReplyAction="http://www.sipsorcery.com/notifications/pull/INotifications/CloseSessionResponse")]
        System.IAsyncResult BeginCloseSession(string sessionID, System.AsyncCallback callback, object asyncState);
        
        void EndCloseSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/notifications/pull/INotifications/CloseConnection", ReplyAction="http://www.sipsorcery.com/notifications/pull/INotifications/CloseConnectionRespon" +
            "se")]
        System.IAsyncResult BeginCloseConnection(System.AsyncCallback callback, object asyncState);
        
        void EndCloseConnection(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/notifications/pull/INotifications/CloseConnectionForAdd" +
            "ress", ReplyAction="http://www.sipsorcery.com/notifications/pull/INotifications/CloseConnectionForAdd" +
            "ressResponse")]
        System.IAsyncResult BeginCloseConnectionForAddress(string addressID, System.AsyncCallback callback, object asyncState);
        
        void EndCloseConnectionForAddress(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationsChannel : SIPSorcery.SIPSorceryNotificationService.INotifications, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPollPeriodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPollPeriodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscribeForAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubscribeForAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNotificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNotificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNotificationsForAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNotificationsForAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationsClient : System.ServiceModel.ClientBase<SIPSorcery.SIPSorceryNotificationService.INotifications>, SIPSorcery.SIPSorceryNotificationService.INotifications {
        
        private BeginOperationDelegate onBeginIsAliveDelegate;
        
        private EndOperationDelegate onEndIsAliveDelegate;
        
        private System.Threading.SendOrPostCallback onIsAliveCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogoutDelegate;
        
        private EndOperationDelegate onEndLogoutDelegate;
        
        private System.Threading.SendOrPostCallback onLogoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPollPeriodDelegate;
        
        private EndOperationDelegate onEndGetPollPeriodDelegate;
        
        private System.Threading.SendOrPostCallback onGetPollPeriodCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscribeDelegate;
        
        private EndOperationDelegate onEndSubscribeDelegate;
        
        private System.Threading.SendOrPostCallback onSubscribeCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscribeForAddressDelegate;
        
        private EndOperationDelegate onEndSubscribeForAddressDelegate;
        
        private System.Threading.SendOrPostCallback onSubscribeForAddressCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNotificationsDelegate;
        
        private EndOperationDelegate onEndGetNotificationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetNotificationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNotificationsForAddressDelegate;
        
        private EndOperationDelegate onEndGetNotificationsForAddressDelegate;
        
        private System.Threading.SendOrPostCallback onGetNotificationsForAddressCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseSessionDelegate;
        
        private EndOperationDelegate onEndCloseSessionDelegate;
        
        private System.Threading.SendOrPostCallback onCloseSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseConnectionDelegate;
        
        private EndOperationDelegate onEndCloseConnectionDelegate;
        
        private System.Threading.SendOrPostCallback onCloseConnectionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseConnectionForAddressDelegate;
        
        private EndOperationDelegate onEndCloseConnectionForAddressDelegate;
        
        private System.Threading.SendOrPostCallback onCloseConnectionForAddressCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public NotificationsClient() {
        }
        
        public NotificationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotificationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<IsAliveCompletedEventArgs> IsAliveCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogoutCompleted;
        
        public event System.EventHandler<GetPollPeriodCompletedEventArgs> GetPollPeriodCompleted;
        
        public event System.EventHandler<SubscribeCompletedEventArgs> SubscribeCompleted;
        
        public event System.EventHandler<SubscribeForAddressCompletedEventArgs> SubscribeForAddressCompleted;
        
        public event System.EventHandler<GetNotificationsCompletedEventArgs> GetNotificationsCompleted;
        
        public event System.EventHandler<GetNotificationsForAddressCompletedEventArgs> GetNotificationsForAddressCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseSessionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseConnectionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseConnectionForAddressCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryNotificationService.INotifications.BeginIsAlive(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsAlive(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SIPSorcery.SIPSorceryNotificationService.INotifications.EndIsAlive(System.IAsyncResult result) {
            return base.Channel.EndIsAlive(result);
        }
        
        private System.IAsyncResult OnBeginIsAlive(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).BeginIsAlive(callback, asyncState);
        }
        
        private object[] OnEndIsAlive(System.IAsyncResult result) {
            bool retVal = ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).EndIsAlive(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsAliveCompleted(object state) {
            if ((this.IsAliveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsAliveCompleted(this, new IsAliveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsAliveAsync() {
            this.IsAliveAsync(null);
        }
        
        public void IsAliveAsync(object userState) {
            if ((this.onBeginIsAliveDelegate == null)) {
                this.onBeginIsAliveDelegate = new BeginOperationDelegate(this.OnBeginIsAlive);
            }
            if ((this.onEndIsAliveDelegate == null)) {
                this.onEndIsAliveDelegate = new EndOperationDelegate(this.OnEndIsAlive);
            }
            if ((this.onIsAliveCompletedDelegate == null)) {
                this.onIsAliveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsAliveCompleted);
            }
            base.InvokeAsync(this.onBeginIsAliveDelegate, null, this.onEndIsAliveDelegate, this.onIsAliveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryNotificationService.INotifications.BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SIPSorcery.SIPSorceryNotificationService.INotifications.EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).BeginLogin(username, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            string retVal = ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string username, string password) {
            this.LoginAsync(username, password, null);
        }
        
        public void LoginAsync(string username, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        username,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryNotificationService.INotifications.BeginLogout(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogout(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SIPSorcery.SIPSorceryNotificationService.INotifications.EndLogout(System.IAsyncResult result) {
            base.Channel.EndLogout(result);
        }
        
        private System.IAsyncResult OnBeginLogout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).BeginLogout(callback, asyncState);
        }
        
        private object[] OnEndLogout(System.IAsyncResult result) {
            ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).EndLogout(result);
            return null;
        }
        
        private void OnLogoutCompleted(object state) {
            if ((this.LogoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoutAsync() {
            this.LogoutAsync(null);
        }
        
        public void LogoutAsync(object userState) {
            if ((this.onBeginLogoutDelegate == null)) {
                this.onBeginLogoutDelegate = new BeginOperationDelegate(this.OnBeginLogout);
            }
            if ((this.onEndLogoutDelegate == null)) {
                this.onEndLogoutDelegate = new EndOperationDelegate(this.OnEndLogout);
            }
            if ((this.onLogoutCompletedDelegate == null)) {
                this.onLogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            base.InvokeAsync(this.onBeginLogoutDelegate, null, this.onEndLogoutDelegate, this.onLogoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryNotificationService.INotifications.BeginGetPollPeriod(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPollPeriod(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SIPSorcery.SIPSorceryNotificationService.INotifications.EndGetPollPeriod(System.IAsyncResult result) {
            return base.Channel.EndGetPollPeriod(result);
        }
        
        private System.IAsyncResult OnBeginGetPollPeriod(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).BeginGetPollPeriod(callback, asyncState);
        }
        
        private object[] OnEndGetPollPeriod(System.IAsyncResult result) {
            int retVal = ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).EndGetPollPeriod(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPollPeriodCompleted(object state) {
            if ((this.GetPollPeriodCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPollPeriodCompleted(this, new GetPollPeriodCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPollPeriodAsync() {
            this.GetPollPeriodAsync(null);
        }
        
        public void GetPollPeriodAsync(object userState) {
            if ((this.onBeginGetPollPeriodDelegate == null)) {
                this.onBeginGetPollPeriodDelegate = new BeginOperationDelegate(this.OnBeginGetPollPeriod);
            }
            if ((this.onEndGetPollPeriodDelegate == null)) {
                this.onEndGetPollPeriodDelegate = new EndOperationDelegate(this.OnEndGetPollPeriod);
            }
            if ((this.onGetPollPeriodCompletedDelegate == null)) {
                this.onGetPollPeriodCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPollPeriodCompleted);
            }
            base.InvokeAsync(this.onBeginGetPollPeriodDelegate, null, this.onEndGetPollPeriodDelegate, this.onGetPollPeriodCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryNotificationService.INotifications.BeginSubscribe(string subject, string filter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscribe(subject, filter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SIPSorcery.SIPSorceryNotificationService.INotifications.EndSubscribe(System.IAsyncResult result) {
            return base.Channel.EndSubscribe(result);
        }
        
        private System.IAsyncResult OnBeginSubscribe(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string subject = ((string)(inValues[0]));
            string filter = ((string)(inValues[1]));
            return ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).BeginSubscribe(subject, filter, callback, asyncState);
        }
        
        private object[] OnEndSubscribe(System.IAsyncResult result) {
            string retVal = ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).EndSubscribe(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubscribeCompleted(object state) {
            if ((this.SubscribeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscribeCompleted(this, new SubscribeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscribeAsync(string subject, string filter) {
            this.SubscribeAsync(subject, filter, null);
        }
        
        public void SubscribeAsync(string subject, string filter, object userState) {
            if ((this.onBeginSubscribeDelegate == null)) {
                this.onBeginSubscribeDelegate = new BeginOperationDelegate(this.OnBeginSubscribe);
            }
            if ((this.onEndSubscribeDelegate == null)) {
                this.onEndSubscribeDelegate = new EndOperationDelegate(this.OnEndSubscribe);
            }
            if ((this.onSubscribeCompletedDelegate == null)) {
                this.onSubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscribeCompleted);
            }
            base.InvokeAsync(this.onBeginSubscribeDelegate, new object[] {
                        subject,
                        filter}, this.onEndSubscribeDelegate, this.onSubscribeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryNotificationService.INotifications.BeginSubscribeForAddress(string subject, string filter, string addressID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscribeForAddress(subject, filter, addressID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SIPSorcery.SIPSorceryNotificationService.INotifications.EndSubscribeForAddress(System.IAsyncResult result) {
            return base.Channel.EndSubscribeForAddress(result);
        }
        
        private System.IAsyncResult OnBeginSubscribeForAddress(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string subject = ((string)(inValues[0]));
            string filter = ((string)(inValues[1]));
            string addressID = ((string)(inValues[2]));
            return ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).BeginSubscribeForAddress(subject, filter, addressID, callback, asyncState);
        }
        
        private object[] OnEndSubscribeForAddress(System.IAsyncResult result) {
            string retVal = ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).EndSubscribeForAddress(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubscribeForAddressCompleted(object state) {
            if ((this.SubscribeForAddressCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscribeForAddressCompleted(this, new SubscribeForAddressCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscribeForAddressAsync(string subject, string filter, string addressID) {
            this.SubscribeForAddressAsync(subject, filter, addressID, null);
        }
        
        public void SubscribeForAddressAsync(string subject, string filter, string addressID, object userState) {
            if ((this.onBeginSubscribeForAddressDelegate == null)) {
                this.onBeginSubscribeForAddressDelegate = new BeginOperationDelegate(this.OnBeginSubscribeForAddress);
            }
            if ((this.onEndSubscribeForAddressDelegate == null)) {
                this.onEndSubscribeForAddressDelegate = new EndOperationDelegate(this.OnEndSubscribeForAddress);
            }
            if ((this.onSubscribeForAddressCompletedDelegate == null)) {
                this.onSubscribeForAddressCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscribeForAddressCompleted);
            }
            base.InvokeAsync(this.onBeginSubscribeForAddressDelegate, new object[] {
                        subject,
                        filter,
                        addressID}, this.onEndSubscribeForAddressDelegate, this.onSubscribeForAddressCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryNotificationService.INotifications.BeginGetNotifications(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNotifications(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> SIPSorcery.SIPSorceryNotificationService.INotifications.EndGetNotifications(System.IAsyncResult result) {
            return base.Channel.EndGetNotifications(result);
        }
        
        private System.IAsyncResult OnBeginGetNotifications(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).BeginGetNotifications(callback, asyncState);
        }
        
        private object[] OnEndGetNotifications(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> retVal = ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).EndGetNotifications(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNotificationsCompleted(object state) {
            if ((this.GetNotificationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNotificationsCompleted(this, new GetNotificationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNotificationsAsync() {
            this.GetNotificationsAsync(null);
        }
        
        public void GetNotificationsAsync(object userState) {
            if ((this.onBeginGetNotificationsDelegate == null)) {
                this.onBeginGetNotificationsDelegate = new BeginOperationDelegate(this.OnBeginGetNotifications);
            }
            if ((this.onEndGetNotificationsDelegate == null)) {
                this.onEndGetNotificationsDelegate = new EndOperationDelegate(this.OnEndGetNotifications);
            }
            if ((this.onGetNotificationsCompletedDelegate == null)) {
                this.onGetNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNotificationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetNotificationsDelegate, null, this.onEndGetNotificationsDelegate, this.onGetNotificationsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryNotificationService.INotifications.BeginGetNotificationsForAddress(string addressID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNotificationsForAddress(addressID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> SIPSorcery.SIPSorceryNotificationService.INotifications.EndGetNotificationsForAddress(System.IAsyncResult result) {
            return base.Channel.EndGetNotificationsForAddress(result);
        }
        
        private System.IAsyncResult OnBeginGetNotificationsForAddress(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string addressID = ((string)(inValues[0]));
            return ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).BeginGetNotificationsForAddress(addressID, callback, asyncState);
        }
        
        private object[] OnEndGetNotificationsForAddress(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> retVal = ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).EndGetNotificationsForAddress(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNotificationsForAddressCompleted(object state) {
            if ((this.GetNotificationsForAddressCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNotificationsForAddressCompleted(this, new GetNotificationsForAddressCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNotificationsForAddressAsync(string addressID) {
            this.GetNotificationsForAddressAsync(addressID, null);
        }
        
        public void GetNotificationsForAddressAsync(string addressID, object userState) {
            if ((this.onBeginGetNotificationsForAddressDelegate == null)) {
                this.onBeginGetNotificationsForAddressDelegate = new BeginOperationDelegate(this.OnBeginGetNotificationsForAddress);
            }
            if ((this.onEndGetNotificationsForAddressDelegate == null)) {
                this.onEndGetNotificationsForAddressDelegate = new EndOperationDelegate(this.OnEndGetNotificationsForAddress);
            }
            if ((this.onGetNotificationsForAddressCompletedDelegate == null)) {
                this.onGetNotificationsForAddressCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNotificationsForAddressCompleted);
            }
            base.InvokeAsync(this.onBeginGetNotificationsForAddressDelegate, new object[] {
                        addressID}, this.onEndGetNotificationsForAddressDelegate, this.onGetNotificationsForAddressCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryNotificationService.INotifications.BeginCloseSession(string sessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCloseSession(sessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SIPSorcery.SIPSorceryNotificationService.INotifications.EndCloseSession(System.IAsyncResult result) {
            base.Channel.EndCloseSession(result);
        }
        
        private System.IAsyncResult OnBeginCloseSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            return ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).BeginCloseSession(sessionID, callback, asyncState);
        }
        
        private object[] OnEndCloseSession(System.IAsyncResult result) {
            ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).EndCloseSession(result);
            return null;
        }
        
        private void OnCloseSessionCompleted(object state) {
            if ((this.CloseSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseSessionAsync(string sessionID) {
            this.CloseSessionAsync(sessionID, null);
        }
        
        public void CloseSessionAsync(string sessionID, object userState) {
            if ((this.onBeginCloseSessionDelegate == null)) {
                this.onBeginCloseSessionDelegate = new BeginOperationDelegate(this.OnBeginCloseSession);
            }
            if ((this.onEndCloseSessionDelegate == null)) {
                this.onEndCloseSessionDelegate = new EndOperationDelegate(this.OnEndCloseSession);
            }
            if ((this.onCloseSessionCompletedDelegate == null)) {
                this.onCloseSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseSessionCompleted);
            }
            base.InvokeAsync(this.onBeginCloseSessionDelegate, new object[] {
                        sessionID}, this.onEndCloseSessionDelegate, this.onCloseSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryNotificationService.INotifications.BeginCloseConnection(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCloseConnection(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SIPSorcery.SIPSorceryNotificationService.INotifications.EndCloseConnection(System.IAsyncResult result) {
            base.Channel.EndCloseConnection(result);
        }
        
        private System.IAsyncResult OnBeginCloseConnection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).BeginCloseConnection(callback, asyncState);
        }
        
        private object[] OnEndCloseConnection(System.IAsyncResult result) {
            ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).EndCloseConnection(result);
            return null;
        }
        
        private void OnCloseConnectionCompleted(object state) {
            if ((this.CloseConnectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseConnectionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseConnectionAsync() {
            this.CloseConnectionAsync(null);
        }
        
        public void CloseConnectionAsync(object userState) {
            if ((this.onBeginCloseConnectionDelegate == null)) {
                this.onBeginCloseConnectionDelegate = new BeginOperationDelegate(this.OnBeginCloseConnection);
            }
            if ((this.onEndCloseConnectionDelegate == null)) {
                this.onEndCloseConnectionDelegate = new EndOperationDelegate(this.OnEndCloseConnection);
            }
            if ((this.onCloseConnectionCompletedDelegate == null)) {
                this.onCloseConnectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseConnectionCompleted);
            }
            base.InvokeAsync(this.onBeginCloseConnectionDelegate, null, this.onEndCloseConnectionDelegate, this.onCloseConnectionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryNotificationService.INotifications.BeginCloseConnectionForAddress(string addressID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCloseConnectionForAddress(addressID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SIPSorcery.SIPSorceryNotificationService.INotifications.EndCloseConnectionForAddress(System.IAsyncResult result) {
            base.Channel.EndCloseConnectionForAddress(result);
        }
        
        private System.IAsyncResult OnBeginCloseConnectionForAddress(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string addressID = ((string)(inValues[0]));
            return ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).BeginCloseConnectionForAddress(addressID, callback, asyncState);
        }
        
        private object[] OnEndCloseConnectionForAddress(System.IAsyncResult result) {
            ((SIPSorcery.SIPSorceryNotificationService.INotifications)(this)).EndCloseConnectionForAddress(result);
            return null;
        }
        
        private void OnCloseConnectionForAddressCompleted(object state) {
            if ((this.CloseConnectionForAddressCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseConnectionForAddressCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseConnectionForAddressAsync(string addressID) {
            this.CloseConnectionForAddressAsync(addressID, null);
        }
        
        public void CloseConnectionForAddressAsync(string addressID, object userState) {
            if ((this.onBeginCloseConnectionForAddressDelegate == null)) {
                this.onBeginCloseConnectionForAddressDelegate = new BeginOperationDelegate(this.OnBeginCloseConnectionForAddress);
            }
            if ((this.onEndCloseConnectionForAddressDelegate == null)) {
                this.onEndCloseConnectionForAddressDelegate = new EndOperationDelegate(this.OnEndCloseConnectionForAddress);
            }
            if ((this.onCloseConnectionForAddressCompletedDelegate == null)) {
                this.onCloseConnectionForAddressCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseConnectionForAddressCompleted);
            }
            base.InvokeAsync(this.onBeginCloseConnectionForAddressDelegate, new object[] {
                        addressID}, this.onEndCloseConnectionForAddressDelegate, this.onCloseConnectionForAddressCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SIPSorcery.SIPSorceryNotificationService.INotifications CreateChannel() {
            return new NotificationsClientChannel(this);
        }
        
        private class NotificationsClientChannel : ChannelBase<SIPSorcery.SIPSorceryNotificationService.INotifications>, SIPSorcery.SIPSorceryNotificationService.INotifications {
            
            public NotificationsClientChannel(System.ServiceModel.ClientBase<SIPSorcery.SIPSorceryNotificationService.INotifications> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginIsAlive(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("IsAlive", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsAlive(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsAlive", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public string EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Logout", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLogout(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Logout", _args, result);
            }
            
            public System.IAsyncResult BeginGetPollPeriod(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetPollPeriod", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetPollPeriod(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetPollPeriod", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSubscribe(string subject, string filter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = subject;
                _args[1] = filter;
                System.IAsyncResult _result = base.BeginInvoke("Subscribe", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSubscribe(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Subscribe", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSubscribeForAddress(string subject, string filter, string addressID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = subject;
                _args[1] = filter;
                _args[2] = addressID;
                System.IAsyncResult _result = base.BeginInvoke("SubscribeForAddress", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSubscribeForAddress(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SubscribeForAddress", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNotifications(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetNotifications", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> EndGetNotifications(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> _result = ((System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>)(base.EndInvoke("GetNotifications", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNotificationsForAddress(string addressID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = addressID;
                System.IAsyncResult _result = base.BeginInvoke("GetNotificationsForAddress", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> EndGetNotificationsForAddress(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> _result = ((System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>)(base.EndInvoke("GetNotificationsForAddress", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCloseSession(string sessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sessionID;
                System.IAsyncResult _result = base.BeginInvoke("CloseSession", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCloseSession(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CloseSession", _args, result);
            }
            
            public System.IAsyncResult BeginCloseConnection(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("CloseConnection", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCloseConnection(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CloseConnection", _args, result);
            }
            
            public System.IAsyncResult BeginCloseConnectionForAddress(string addressID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = addressID;
                System.IAsyncResult _result = base.BeginInvoke("CloseConnectionForAddress", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCloseConnectionForAddress(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CloseConnectionForAddress", _args, result);
            }
        }
    }
}
