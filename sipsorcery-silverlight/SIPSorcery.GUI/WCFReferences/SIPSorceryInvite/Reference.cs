//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SIPSorcery.SIPSorceryInvite {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.sipsorcery.com/invite/rest", ConfigurationName="SIPSorceryInvite.ISIPSorceryInviteServiceREST")]
    public interface ISIPSorceryInviteServiceREST {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/invite/rest/ISIPSorceryInviteServiceREST/IsInviteCodeVa" +
            "lid", ReplyAction="http://www.sipsorcery.com/invite/rest/ISIPSorceryInviteServiceREST/IsInviteCodeVa" +
            "lidResponse")]
        System.IAsyncResult BeginIsInviteCodeValid(string inviteCode, System.AsyncCallback callback, object asyncState);
        
        string EndIsInviteCodeValid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/invite/rest/ISIPSorceryInviteServiceREST/IsAlive", ReplyAction="http://www.sipsorcery.com/invite/rest/ISIPSorceryInviteServiceREST/IsAliveRespons" +
            "e")]
        System.IAsyncResult BeginIsAlive(System.AsyncCallback callback, object asyncState);
        
        bool EndIsAlive(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISIPSorceryInviteServiceRESTChannel : SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsInviteCodeValidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsInviteCodeValidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SIPSorceryInviteServiceRESTClient : System.ServiceModel.ClientBase<SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST>, SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST {
        
        private BeginOperationDelegate onBeginIsInviteCodeValidDelegate;
        
        private EndOperationDelegate onEndIsInviteCodeValidDelegate;
        
        private System.Threading.SendOrPostCallback onIsInviteCodeValidCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsAliveDelegate;
        
        private EndOperationDelegate onEndIsAliveDelegate;
        
        private System.Threading.SendOrPostCallback onIsAliveCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SIPSorceryInviteServiceRESTClient() {
        }
        
        public SIPSorceryInviteServiceRESTClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SIPSorceryInviteServiceRESTClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SIPSorceryInviteServiceRESTClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SIPSorceryInviteServiceRESTClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<IsInviteCodeValidCompletedEventArgs> IsInviteCodeValidCompleted;
        
        public event System.EventHandler<IsAliveCompletedEventArgs> IsAliveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST.BeginIsInviteCodeValid(string inviteCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsInviteCodeValid(inviteCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST.EndIsInviteCodeValid(System.IAsyncResult result) {
            return base.Channel.EndIsInviteCodeValid(result);
        }
        
        private System.IAsyncResult OnBeginIsInviteCodeValid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string inviteCode = ((string)(inValues[0]));
            return ((SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST)(this)).BeginIsInviteCodeValid(inviteCode, callback, asyncState);
        }
        
        private object[] OnEndIsInviteCodeValid(System.IAsyncResult result) {
            string retVal = ((SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST)(this)).EndIsInviteCodeValid(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsInviteCodeValidCompleted(object state) {
            if ((this.IsInviteCodeValidCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsInviteCodeValidCompleted(this, new IsInviteCodeValidCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsInviteCodeValidAsync(string inviteCode) {
            this.IsInviteCodeValidAsync(inviteCode, null);
        }
        
        public void IsInviteCodeValidAsync(string inviteCode, object userState) {
            if ((this.onBeginIsInviteCodeValidDelegate == null)) {
                this.onBeginIsInviteCodeValidDelegate = new BeginOperationDelegate(this.OnBeginIsInviteCodeValid);
            }
            if ((this.onEndIsInviteCodeValidDelegate == null)) {
                this.onEndIsInviteCodeValidDelegate = new EndOperationDelegate(this.OnEndIsInviteCodeValid);
            }
            if ((this.onIsInviteCodeValidCompletedDelegate == null)) {
                this.onIsInviteCodeValidCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsInviteCodeValidCompleted);
            }
            base.InvokeAsync(this.onBeginIsInviteCodeValidDelegate, new object[] {
                        inviteCode}, this.onEndIsInviteCodeValidDelegate, this.onIsInviteCodeValidCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST.BeginIsAlive(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsAlive(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST.EndIsAlive(System.IAsyncResult result) {
            return base.Channel.EndIsAlive(result);
        }
        
        private System.IAsyncResult OnBeginIsAlive(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST)(this)).BeginIsAlive(callback, asyncState);
        }
        
        private object[] OnEndIsAlive(System.IAsyncResult result) {
            bool retVal = ((SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST)(this)).EndIsAlive(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsAliveCompleted(object state) {
            if ((this.IsAliveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsAliveCompleted(this, new IsAliveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsAliveAsync() {
            this.IsAliveAsync(null);
        }
        
        public void IsAliveAsync(object userState) {
            if ((this.onBeginIsAliveDelegate == null)) {
                this.onBeginIsAliveDelegate = new BeginOperationDelegate(this.OnBeginIsAlive);
            }
            if ((this.onEndIsAliveDelegate == null)) {
                this.onEndIsAliveDelegate = new EndOperationDelegate(this.OnEndIsAlive);
            }
            if ((this.onIsAliveCompletedDelegate == null)) {
                this.onIsAliveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsAliveCompleted);
            }
            base.InvokeAsync(this.onBeginIsAliveDelegate, null, this.onEndIsAliveDelegate, this.onIsAliveCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST CreateChannel() {
            return new SIPSorceryInviteServiceRESTClientChannel(this);
        }
        
        private class SIPSorceryInviteServiceRESTClientChannel : ChannelBase<SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST>, SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST {
            
            public SIPSorceryInviteServiceRESTClientChannel(System.ServiceModel.ClientBase<SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteServiceREST> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginIsInviteCodeValid(string inviteCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = inviteCode;
                System.IAsyncResult _result = base.BeginInvoke("IsInviteCodeValid", _args, callback, asyncState);
                return _result;
            }
            
            public string EndIsInviteCodeValid(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("IsInviteCodeValid", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsAlive(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("IsAlive", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsAlive(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsAlive", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.sipsorcery.com/invite", ConfigurationName="SIPSorceryInvite.ISIPSorceryInviteService")]
    public interface ISIPSorceryInviteService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/invite/ISIPSorceryInviteService/IsAlive", ReplyAction="http://www.sipsorcery.com/invite/ISIPSorceryInviteService/IsAliveResponse")]
        System.IAsyncResult BeginIsAlive(System.AsyncCallback callback, object asyncState);
        
        bool EndIsAlive(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.sipsorcery.com/invite/ISIPSorceryInviteService/IsInviteCodeValid", ReplyAction="http://www.sipsorcery.com/invite/ISIPSorceryInviteService/IsInviteCodeValidRespon" +
            "se")]
        System.IAsyncResult BeginIsInviteCodeValid(string inviteCode, System.AsyncCallback callback, object asyncState);
        
        string EndIsInviteCodeValid(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISIPSorceryInviteServiceChannel : SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsAliveCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsAliveCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsInviteCodeValidCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsInviteCodeValidCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SIPSorceryInviteServiceClient : System.ServiceModel.ClientBase<SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService>, SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService {
        
        private BeginOperationDelegate onBeginIsAliveDelegate;
        
        private EndOperationDelegate onEndIsAliveDelegate;
        
        private System.Threading.SendOrPostCallback onIsAliveCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsInviteCodeValidDelegate;
        
        private EndOperationDelegate onEndIsInviteCodeValidDelegate;
        
        private System.Threading.SendOrPostCallback onIsInviteCodeValidCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SIPSorceryInviteServiceClient() {
        }
        
        public SIPSorceryInviteServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SIPSorceryInviteServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SIPSorceryInviteServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SIPSorceryInviteServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<IsAliveCompletedEventArgs1> IsAliveCompleted;
        
        public event System.EventHandler<IsInviteCodeValidCompletedEventArgs1> IsInviteCodeValidCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService.BeginIsAlive(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsAlive(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService.EndIsAlive(System.IAsyncResult result) {
            return base.Channel.EndIsAlive(result);
        }
        
        private System.IAsyncResult OnBeginIsAlive(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService)(this)).BeginIsAlive(callback, asyncState);
        }
        
        private object[] OnEndIsAlive(System.IAsyncResult result) {
            bool retVal = ((SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService)(this)).EndIsAlive(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsAliveCompleted(object state) {
            if ((this.IsAliveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsAliveCompleted(this, new IsAliveCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsAliveAsync() {
            this.IsAliveAsync(null);
        }
        
        public void IsAliveAsync(object userState) {
            if ((this.onBeginIsAliveDelegate == null)) {
                this.onBeginIsAliveDelegate = new BeginOperationDelegate(this.OnBeginIsAlive);
            }
            if ((this.onEndIsAliveDelegate == null)) {
                this.onEndIsAliveDelegate = new EndOperationDelegate(this.OnEndIsAlive);
            }
            if ((this.onIsAliveCompletedDelegate == null)) {
                this.onIsAliveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsAliveCompleted);
            }
            base.InvokeAsync(this.onBeginIsAliveDelegate, null, this.onEndIsAliveDelegate, this.onIsAliveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService.BeginIsInviteCodeValid(string inviteCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsInviteCodeValid(inviteCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService.EndIsInviteCodeValid(System.IAsyncResult result) {
            return base.Channel.EndIsInviteCodeValid(result);
        }
        
        private System.IAsyncResult OnBeginIsInviteCodeValid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string inviteCode = ((string)(inValues[0]));
            return ((SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService)(this)).BeginIsInviteCodeValid(inviteCode, callback, asyncState);
        }
        
        private object[] OnEndIsInviteCodeValid(System.IAsyncResult result) {
            string retVal = ((SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService)(this)).EndIsInviteCodeValid(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsInviteCodeValidCompleted(object state) {
            if ((this.IsInviteCodeValidCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsInviteCodeValidCompleted(this, new IsInviteCodeValidCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsInviteCodeValidAsync(string inviteCode) {
            this.IsInviteCodeValidAsync(inviteCode, null);
        }
        
        public void IsInviteCodeValidAsync(string inviteCode, object userState) {
            if ((this.onBeginIsInviteCodeValidDelegate == null)) {
                this.onBeginIsInviteCodeValidDelegate = new BeginOperationDelegate(this.OnBeginIsInviteCodeValid);
            }
            if ((this.onEndIsInviteCodeValidDelegate == null)) {
                this.onEndIsInviteCodeValidDelegate = new EndOperationDelegate(this.OnEndIsInviteCodeValid);
            }
            if ((this.onIsInviteCodeValidCompletedDelegate == null)) {
                this.onIsInviteCodeValidCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsInviteCodeValidCompleted);
            }
            base.InvokeAsync(this.onBeginIsInviteCodeValidDelegate, new object[] {
                        inviteCode}, this.onEndIsInviteCodeValidDelegate, this.onIsInviteCodeValidCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService CreateChannel() {
            return new SIPSorceryInviteServiceClientChannel(this);
        }
        
        private class SIPSorceryInviteServiceClientChannel : ChannelBase<SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService>, SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService {
            
            public SIPSorceryInviteServiceClientChannel(System.ServiceModel.ClientBase<SIPSorcery.SIPSorceryInvite.ISIPSorceryInviteService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginIsAlive(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("IsAlive", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsAlive(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsAlive", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsInviteCodeValid(string inviteCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = inviteCode;
                System.IAsyncResult _result = base.BeginInvoke("IsInviteCodeValid", _args, callback, asyncState);
                return _result;
            }
            
            public string EndIsInviteCodeValid(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("IsInviteCodeValid", _args, result)));
                return _result;
            }
        }
    }
}
